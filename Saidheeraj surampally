{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cd77a887",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:20.541494Z",
     "iopub.status.busy": "2021-10-30T12:26:20.540435Z",
     "iopub.status.idle": "2021-10-30T12:26:20.551723Z",
     "shell.execute_reply": "2021-10-30T12:26:20.552381Z",
     "shell.execute_reply.started": "2021-10-30T12:23:48.791834Z"
    },
    "papermill": {
     "duration": 0.084827,
     "end_time": "2021-10-30T12:26:20.552722",
     "exception": false,
     "start_time": "2021-10-30T12:26:20.467895",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/titanic/train.csv\n",
      "/kaggle/input/titanic/test.csv\n",
      "/kaggle/input/titanic/gender_submission.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1534f3db",
   "metadata": {
    "papermill": {
     "duration": 0.0672,
     "end_time": "2021-10-30T12:26:20.688342",
     "exception": false,
     "start_time": "2021-10-30T12:26:20.621142",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Titanic Survival Analysis and Prediction (Top 10%-Beginner Friendly)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58052f15",
   "metadata": {
    "papermill": {
     "duration": 0.066275,
     "end_time": "2021-10-30T12:26:20.820715",
     "exception": false,
     "start_time": "2021-10-30T12:26:20.754440",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This notebook aims to analyze Titanic Disaster and build models to predict survival.  \n",
    "* [**Author**](https://www.linkedin.com/in/chi-wang-22a337207/)\n",
    "* [**Dataset**](https://www.kaggle.com/c/titanic/data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "627ce691",
   "metadata": {
    "papermill": {
     "duration": 0.065983,
     "end_time": "2021-10-30T12:26:20.952727",
     "exception": false,
     "start_time": "2021-10-30T12:26:20.886744",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Key Findings\n",
    "* The Label(Survived) is imbalanced. Survived passengers makes up 1/3 of the total number.\n",
    "* People who have Carbin information are likely to survive.\n",
    "* Female are more likely to survive than male.\n",
    "* People with 1(less) sibling seems to have a higer survival rate. The more siblings, the lower survival rate.\n",
    "* The higher the class level is, the more possible the passenger can survive.\n",
    "* The more expensive the ticket is, the more possible the passenger can survive.(It is coherent with the class level)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7737ffaa",
   "metadata": {
    "papermill": {
     "duration": 0.06743,
     "end_time": "2021-10-30T12:26:21.085955",
     "exception": false,
     "start_time": "2021-10-30T12:26:21.018525",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Tips\n",
    "* Divide the whole project into several stages, each stage save a middle version of data. It's helpful for later examining.\n",
    "* Columns with too much Missing value(>40%) should be useless. However, the \"Missing value information\" could be valuable. Eg. Cabin.\n",
    "* Find the high correlation feature as the group key for group imputation.\n",
    "* It's better to bin the numerical features in Classification scenario. The strategy of binning(number,range,step) is important. It's better to do it with Visualization.\n",
    "* Take the advantage of all the given dataset(train and test). Eg. Imputation, Modelling.\n",
    "* Feature Engineering is so important, more than hyper-parameter tuning.\n",
    "* Overfitting usually happens especially in the relatively small dataset. Complex models not always outperform than simple model.\n",
    "* Do not trust the 100% accuracy performance in the leaderboard. They are cheating.\n",
    "* Do not be very struggle with the leaderboard performance. As long as you do everything right, the performance should be acceptable(Top 10%,20%).\n",
    "* Don't waste too much time to make small improvement (balance!!!). The important part is the process/method of Analysis and Modelling.\n",
    "* Learn from the best. Kernel(Top voted, Top comments) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d09b2b1",
   "metadata": {
    "papermill": {
     "duration": 0.065832,
     "end_time": "2021-10-30T12:26:21.218884",
     "exception": false,
     "start_time": "2021-10-30T12:26:21.153052",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Issues\n",
    "* Didn't apply feature scaleing for the needed models(Eg. KNN, Logistic regression). Although, Tree-based models don't need this.\n",
    "* Didn't apply parameter tuning for modeling.\n",
    "* Could enrich the type of the visualization."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4540bc6d",
   "metadata": {
    "papermill": {
     "duration": 0.066295,
     "end_time": "2021-10-30T12:26:21.351324",
     "exception": false,
     "start_time": "2021-10-30T12:26:21.285029",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Reference(Thanks for inspiration)\n",
    "* https://www.kaggle.com/javiervallejos/titanic-simple-decision-tree-model-score-top-3/notebook\n",
    "* https://www.kaggle.com/giorgosfoukarakis/titanic-from-eda-to-the-power-of-ensembles-top4"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8fadf155",
   "metadata": {
    "papermill": {
     "duration": 0.065676,
     "end_time": "2021-10-30T12:26:21.482839",
     "exception": false,
     "start_time": "2021-10-30T12:26:21.417163",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Table of Content\n",
    "1. [Data Overview](#1)\n",
    "    * [1. Load Data](#1.1)\n",
    "    * [2. Data Type](#1.2)\n",
    "    * [3. Statistical View](#1.3)\n",
    "2. [Data Preprocessing](#2)\n",
    "    * [1. Extract Potential Information](#2.1)\n",
    "        * [Title](#2.1.1)\n",
    "    * [2. Drop irrelevant columns](#2.2)\n",
    "    * [3. Missing Value Detection](#2.3)\n",
    "    * [4. Data Imputation](#2.4)\n",
    "        * [1.Missing Value Exploratory](#2.4.1)\n",
    "            * [Age](#2.4.1.1)\n",
    "            * [Fare](#2.4.1.2)\n",
    "            * [Embarked](#2.4.1.3)\n",
    "            * [Cabin](#2.4.1.4)\n",
    "        * [2. Median imputation](#2.4.2)\n",
    "        * [3. Majority value imputation](#2.4.3)\n",
    "3. [Data Analysis](#3)\n",
    "    * [1. What is the distribution of survival? ](#3.1)\n",
    "    * [2. What is the distribution of Sex on survival? ](#3.2)\n",
    "    * [3. What is the distribution of Pclass on survival? ](#3.3)\n",
    "    * [4. What is the distribution of SibSp on survival? ](#3.4)\n",
    "    * [5. What is the distribution of Parch on survival? ](#3.5)\n",
    "    * [6. What is the distribution of Embarked on survival? ](#3.6)\n",
    "    * [7. What is the distribution of Age on survival? ](#3.7)\n",
    "    * [8. What is the distribution of Fare on survival? ](#3.8)\n",
    "4. [Feature Engineering](#4)\n",
    "    * [1. Create new features ](#4.1)\n",
    "        * [Family Size](#4.1.1)\n",
    "    * [2. One-Hot Encoding ](#4.2)\n",
    "    * [3. Label Encoding ](#4.3)\n",
    "5. [Modelling](#5)\n",
    "    * [1. Train Test Split ](#5.1)\n",
    "    * [2. Train Models ](#5.2)\n",
    "        * [1. Logistic regression ](#5.2.1)\n",
    "        * [2. k-nearest neighbors ](#5.2.2)\n",
    "        * [3. Support Vector Machine ](#5.2.3)\n",
    "        * [4. Decision Tree ](#5.2.4)\n",
    "        * [5. Random Forest ](#5.2.5)\n",
    "        * [6. Gradient boosting ](#5.2.6)\n",
    "        * [7. XGBoost ](#5.2.7)\n",
    "        * [8. CatBoost ](#5.2.8)\n",
    "        * [9. LGBoost ](#5.2.9)\n",
    "    * [3. Model Comparison ](#5.3)\n",
    "6. [Prediction](#6)\n",
    "    * [1. Drop irrelevant columns](#6.1)\n",
    "    * [2. Feature Engineering](#6.2)\n",
    "    * [3. Make Prediction](#6.3)\n",
    "    * [4. Save the Prediction to CSV file](#6.4)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17b40924",
   "metadata": {
    "papermill": {
     "duration": 0.066373,
     "end_time": "2021-10-30T12:26:21.616130",
     "exception": false,
     "start_time": "2021-10-30T12:26:21.549757",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"1\"></a>\n",
    "# 1. Data Overview"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5dceb503",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:21.756753Z",
     "iopub.status.busy": "2021-10-30T12:26:21.756117Z",
     "iopub.status.idle": "2021-10-30T12:26:24.795689Z",
     "shell.execute_reply": "2021-10-30T12:26:24.795161Z",
     "shell.execute_reply.started": "2021-10-30T12:23:48.813241Z"
    },
    "papermill": {
     "duration": 3.113479,
     "end_time": "2021-10-30T12:26:24.795827",
     "exception": false,
     "start_time": "2021-10-30T12:26:21.682348",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style type='text/css'>\n",
       ".datatable table.frame { margin-bottom: 0; }\n",
       ".datatable table.frame thead { border-bottom: none; }\n",
       ".datatable table.frame tr.coltypes td {  color: #FFFFFF;  line-height: 6px;  padding: 0 0.5em;}\n",
       ".datatable .bool    { background: #DDDD99; }\n",
       ".datatable .object  { background: #565656; }\n",
       ".datatable .int     { background: #5D9E5D; }\n",
       ".datatable .float   { background: #4040CC; }\n",
       ".datatable .str     { background: #CC4040; }\n",
       ".datatable .time    { background: #40CC40; }\n",
       ".datatable .row_index {  background: var(--jp-border-color3);  border-right: 1px solid var(--jp-border-color0);  color: var(--jp-ui-font-color3);  font-size: 9px;}\n",
       ".datatable .frame tbody td { text-align: left; }\n",
       ".datatable .frame tr.coltypes .row_index {  background: var(--jp-border-color0);}\n",
       ".datatable th:nth-child(2) { padding-left: 12px; }\n",
       ".datatable .hellipsis {  color: var(--jp-cell-editor-border-color);}\n",
       ".datatable .vellipsis {  background: var(--jp-layout-color0);  color: var(--jp-cell-editor-border-color);}\n",
       ".datatable .na {  color: var(--jp-cell-editor-border-color);  font-size: 80%;}\n",
       ".datatable .sp {  opacity: 0.25;}\n",
       ".datatable .footer { font-size: 9px; }\n",
       ".datatable .frame_dimensions {  background: var(--jp-border-color3);  border-top: 1px solid var(--jp-border-color0);  color: var(--jp-ui-font-color3);  display: inline-block;  opacity: 0.6;  padding: 1px 10px 1px 5px;}\n",
       "</style>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Import packages\n",
    "\n",
    "## Basic data processing\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "## Data Visualization\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "import plotly.graph_objects as go\n",
    "import plotly.express as px\n",
    "from plotly.subplots import make_subplots\n",
    "\n",
    "## Modelling\n",
    "from sklearn.preprocessing import LabelEncoder, OneHotEncoder\n",
    "from sklearn.model_selection import train_test_split, ShuffleSplit, cross_val_score, StratifiedShuffleSplit, GridSearchCV\n",
    "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, f1_score, roc_curve\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, VotingClassifier\n",
    "from xgboost import XGBClassifier\n",
    "from catboost import CatBoostClassifier\n",
    "from lightgbm import LGBMClassifier\n",
    "\n",
    "## Settings\n",
    "pd.set_option('display.max_columns', 500) # Able to display more columns."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f637d6f",
   "metadata": {
    "papermill": {
     "duration": 0.065834,
     "end_time": "2021-10-30T12:26:24.928398",
     "exception": false,
     "start_time": "2021-10-30T12:26:24.862564",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"1.1\"></a>\n",
    "## 1.1. Load Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "40d39371",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:25.067001Z",
     "iopub.status.busy": "2021-10-30T12:26:25.066169Z",
     "iopub.status.idle": "2021-10-30T12:26:25.118323Z",
     "shell.execute_reply": "2021-10-30T12:26:25.118709Z",
     "shell.execute_reply.started": "2021-10-30T12:23:52.508755Z"
    },
    "papermill": {
     "duration": 0.124462,
     "end_time": "2021-10-30T12:26:25.118893",
     "exception": false,
     "start_time": "2021-10-30T12:26:24.994431",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 1309 entries, 0 to 417\n",
      "Data columns (total 12 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  1309 non-null   int64  \n",
      " 1   Survived     891 non-null    float64\n",
      " 2   Pclass       1309 non-null   int64  \n",
      " 3   Name         1309 non-null   object \n",
      " 4   Sex          1309 non-null   object \n",
      " 5   Age          1046 non-null   float64\n",
      " 6   SibSp        1309 non-null   int64  \n",
      " 7   Parch        1309 non-null   int64  \n",
      " 8   Ticket       1309 non-null   object \n",
      " 9   Fare         1308 non-null   float64\n",
      " 10  Cabin        295 non-null    object \n",
      " 11  Embarked     1307 non-null   object \n",
      "dtypes: float64(3), int64(4), object(5)\n",
      "memory usage: 132.9+ KB\n"
     ]
    }
   ],
   "source": [
    "# Load the dataset\n",
    "train_df = pd.read_csv(\"../input/titanic/train.csv\")\n",
    "test_df = pd.read_csv(\"../input/titanic/test.csv\")\n",
    "data_df = pd.concat([train_df, test_df])\n",
    "data_df.info() # show entries, dtypes, memory useage."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "87dc0b18",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:25.257143Z",
     "iopub.status.busy": "2021-10-30T12:26:25.256585Z",
     "iopub.status.idle": "2021-10-30T12:26:25.273912Z",
     "shell.execute_reply": "2021-10-30T12:26:25.274349Z",
     "shell.execute_reply.started": "2021-10-30T12:23:52.582470Z"
    },
    "papermill": {
     "duration": 0.088826,
     "end_time": "2021-10-30T12:26:25.274509",
     "exception": false,
     "start_time": "2021-10-30T12:26:25.185683",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1       0.0       3   \n",
       "1            2       1.0       1   \n",
       "2            3       1.0       3   \n",
       "3            4       1.0       1   \n",
       "4            5       0.0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Have a look\n",
    "data_df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f7b38c5a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:25.420561Z",
     "iopub.status.busy": "2021-10-30T12:26:25.419736Z",
     "iopub.status.idle": "2021-10-30T12:26:25.423076Z",
     "shell.execute_reply": "2021-10-30T12:26:25.423505Z",
     "shell.execute_reply.started": "2021-10-30T12:23:52.609835Z"
    },
    "papermill": {
     "duration": 0.078844,
     "end_time": "2021-10-30T12:26:25.423656",
     "exception": false,
     "start_time": "2021-10-30T12:26:25.344812",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((891, 12), (418, 11), (1309, 12))"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check the shape of train,test and the whole dataset\n",
    "train_df.shape, test_df.shape, data_df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d537067",
   "metadata": {
    "papermill": {
     "duration": 0.068545,
     "end_time": "2021-10-30T12:26:25.559524",
     "exception": false,
     "start_time": "2021-10-30T12:26:25.490979",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"1.2\"></a>\n",
    "## 1.2. Data Type\n",
    "\n",
    "> [NOIR](https://www.questionpro.com/blog/nominal-ordinal-interval-ratio/): Nominal, Ordinal, Interval, Ratio.   \n",
    "Specify the data type of each variable for the following statistic analysis.  \n",
    "\n",
    "| Variable              | Type     | Description |\n",
    "| :---                  |  :----:  |  :----:     |\n",
    "| PassengerID | Nominal | The unique ID of passenger |\n",
    "| Name | Nominal | Name\n",
    "| Survived | Nominal  | whether the passenger survived; 0 = No, 1 = Yes | \n",
    "| Pclass | Ordinal | Ticket class; 1 = 1st, 2 = 2nd, 3 = 3rd |\n",
    "| Sex | Nominal | Sex | \n",
    "| Age | Ratio | Age in years | \n",
    "| Sibsp | Ordinal | Number of siblings / spouses aboard the Titanic;| \n",
    "| Parch | Ordinal | Number of parents / children aboard the Titanic;| \n",
    "| Ticket | Nominal | Ticket number |\n",
    "| Fare | Ratio | Passenger fare |\n",
    "| Cabin | Nominal | Cabin number | \n",
    "| Embarked | Nominal | Port of Embarkation |\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9baefc2c",
   "metadata": {
    "papermill": {
     "duration": 0.067108,
     "end_time": "2021-10-30T12:26:25.694405",
     "exception": false,
     "start_time": "2021-10-30T12:26:25.627297",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"1.3\"></a>\n",
    "## 1.3. Statistical View "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9ebcaeb2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:25.832330Z",
     "iopub.status.busy": "2021-10-30T12:26:25.831468Z",
     "iopub.status.idle": "2021-10-30T12:26:25.857922Z",
     "shell.execute_reply": "2021-10-30T12:26:25.858363Z",
     "shell.execute_reply.started": "2021-10-30T12:23:52.618309Z"
    },
    "papermill": {
     "duration": 0.096861,
     "end_time": "2021-10-30T12:26:25.858520",
     "exception": false,
     "start_time": "2021-10-30T12:26:25.761659",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>Fare</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1046.000000</td>\n",
       "      <td>1308.000000</td>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1309.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.294882</td>\n",
       "      <td>29.881138</td>\n",
       "      <td>33.295479</td>\n",
       "      <td>0.498854</td>\n",
       "      <td>0.385027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.837836</td>\n",
       "      <td>14.413493</td>\n",
       "      <td>51.758668</td>\n",
       "      <td>1.041658</td>\n",
       "      <td>0.865560</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.170000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>7.895800</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>14.454200</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>39.000000</td>\n",
       "      <td>31.275000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>512.329200</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>9.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Pclass          Age         Fare        SibSp        Parch\n",
       "count  1309.000000  1046.000000  1308.000000  1309.000000  1309.000000\n",
       "mean      2.294882    29.881138    33.295479     0.498854     0.385027\n",
       "std       0.837836    14.413493    51.758668     1.041658     0.865560\n",
       "min       1.000000     0.170000     0.000000     0.000000     0.000000\n",
       "25%       2.000000    21.000000     7.895800     0.000000     0.000000\n",
       "50%       3.000000    28.000000    14.454200     0.000000     0.000000\n",
       "75%       3.000000    39.000000    31.275000     1.000000     0.000000\n",
       "max       3.000000    80.000000   512.329200     8.000000     9.000000"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Basic statistic on Ordinal, Interval and Ratio data.\n",
    "OIR_columns =  ['Pclass','Age', 'Fare', 'SibSp', 'Parch']\n",
    "data_df[OIR_columns].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e45bdb4",
   "metadata": {
    "papermill": {
     "duration": 0.067259,
     "end_time": "2021-10-30T12:26:25.993683",
     "exception": false,
     "start_time": "2021-10-30T12:26:25.926424",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "1. Most passengers are young(75%)\n",
    "2. There are some expensive tickets(> 500), some weird price(min=0)\n",
    "3. It seems most of the passengers have fewer relatives(SibSp/Parch)---75%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "64493508",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:26.135062Z",
     "iopub.status.busy": "2021-10-30T12:26:26.134173Z",
     "iopub.status.idle": "2021-10-30T12:26:26.161221Z",
     "shell.execute_reply": "2021-10-30T12:26:26.161669Z",
     "shell.execute_reply.started": "2021-10-30T12:23:52.658562Z"
    },
    "papermill": {
     "duration": 0.100384,
     "end_time": "2021-10-30T12:26:26.161829",
     "exception": false,
     "start_time": "2021-10-30T12:26:26.061445",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1309</td>\n",
       "      <td>891.0</td>\n",
       "      <td>1309</td>\n",
       "      <td>1309</td>\n",
       "      <td>1309</td>\n",
       "      <td>295</td>\n",
       "      <td>1307</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>1309</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1307</td>\n",
       "      <td>2</td>\n",
       "      <td>929</td>\n",
       "      <td>186</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Connolly, Miss. Kate</td>\n",
       "      <td>male</td>\n",
       "      <td>CA. 2343</td>\n",
       "      <td>C23 C25 C27</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "      <td>549.0</td>\n",
       "      <td>2</td>\n",
       "      <td>843</td>\n",
       "      <td>11</td>\n",
       "      <td>6</td>\n",
       "      <td>914</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        PassengerId  Survived                  Name   Sex    Ticket  \\\n",
       "count          1309     891.0                  1309  1309      1309   \n",
       "unique         1309       2.0                  1307     2       929   \n",
       "top               1       0.0  Connolly, Miss. Kate  male  CA. 2343   \n",
       "freq              1     549.0                     2   843        11   \n",
       "\n",
       "              Cabin Embarked  \n",
       "count           295     1307  \n",
       "unique          186        3  \n",
       "top     C23 C25 C27        S  \n",
       "freq              6      914  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Basic statistic on Nominal data\n",
    "data_df.loc[:, ~data_df.columns.isin(OIR_columns)].astype(\"object\").describe() # All the Nominal data can be treated as \"object\" type for simplicity."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c3e4113",
   "metadata": {
    "papermill": {
     "duration": 0.069009,
     "end_time": "2021-10-30T12:26:26.299393",
     "exception": false,
     "start_time": "2021-10-30T12:26:26.230384",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "1. There are 3 Ports of Embarkation\n",
    "2. It seems that there are less Cabin information. There are some people share the same cabin\n",
    "3. There are some people have the same ticket(1309-929=380)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "823595e3",
   "metadata": {
    "papermill": {
     "duration": 0.068037,
     "end_time": "2021-10-30T12:26:26.435768",
     "exception": false,
     "start_time": "2021-10-30T12:26:26.367731",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"2\"></a>\n",
    "# 2. Data Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f474514f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:26.576322Z",
     "iopub.status.busy": "2021-10-30T12:26:26.575450Z",
     "iopub.status.idle": "2021-10-30T12:26:26.580802Z",
     "shell.execute_reply": "2021-10-30T12:26:26.581326Z",
     "shell.execute_reply.started": "2021-10-30T12:23:52.696637Z"
    },
    "papermill": {
     "duration": 0.077882,
     "end_time": "2021-10-30T12:26:26.581479",
     "exception": false,
     "start_time": "2021-10-30T12:26:26.503597",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "'''\n",
    "Description: Calculate and Visualize survival rate for chosen feature.\n",
    "Args:\n",
    "    data: The dataset\n",
    "    feature: The chosen feature\n",
    "    graph_type: The graph type. Eg. \"bar\", \"point\"\n",
    "Return: None\n",
    "'''\n",
    "def survival_rate(data, feature, graph_type):\n",
    "    # Calculate survival rate\n",
    "    print(data[[feature, 'Survived']].groupby([feature], as_index=False).mean().sort_values(by='Survived'))\n",
    "    # Visualization\n",
    "    sns.catplot(x=feature, y=\"Survived\", data=data, kind=graph_type, height=6, aspect=1)\\\n",
    "       .set_ylabels(\"Survival Rate\")\\\n",
    "       .ax.set_title(f\"Survival Rate on {feature}\", fontsize = 20)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "486f63e3",
   "metadata": {
    "papermill": {
     "duration": 0.114242,
     "end_time": "2021-10-30T12:26:26.764022",
     "exception": false,
     "start_time": "2021-10-30T12:26:26.649780",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"2.1\"></a>\n",
    "## 2.1. Extract Potential Information"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9442bb8",
   "metadata": {
    "papermill": {
     "duration": 0.067609,
     "end_time": "2021-10-30T12:26:26.899706",
     "exception": false,
     "start_time": "2021-10-30T12:26:26.832097",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"2.1.1\"></a>\n",
    "### Title"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "08909e78",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:27.039355Z",
     "iopub.status.busy": "2021-10-30T12:26:27.038497Z",
     "iopub.status.idle": "2021-10-30T12:26:27.047986Z",
     "shell.execute_reply": "2021-10-30T12:26:27.048477Z",
     "shell.execute_reply.started": "2021-10-30T12:23:52.706333Z"
    },
    "papermill": {
     "duration": 0.080712,
     "end_time": "2021-10-30T12:26:27.048629",
     "exception": false,
     "start_time": "2021-10-30T12:26:26.967917",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Mr              757\n",
       "Miss            260\n",
       "Mrs             197\n",
       "Master           61\n",
       "Dr                8\n",
       "Rev               8\n",
       "Col               4\n",
       "Ms                2\n",
       "Mlle              2\n",
       "Major             2\n",
       "Mme               1\n",
       "Jonkheer          1\n",
       "Lady              1\n",
       "Capt              1\n",
       "the Countess      1\n",
       "Sir               1\n",
       "Don               1\n",
       "Dona              1\n",
       "Name: title, dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Extract title from Name\n",
    "data_df['title'] = data_df['Name'].map(lambda x:x.split(',')[1].split('.')[0].strip())\n",
    "data_df['title'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "307de770",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:27.192754Z",
     "iopub.status.busy": "2021-10-30T12:26:27.191916Z",
     "iopub.status.idle": "2021-10-30T12:26:27.196462Z",
     "shell.execute_reply": "2021-10-30T12:26:27.196982Z",
     "shell.execute_reply.started": "2021-10-30T12:23:52.732919Z"
    },
    "papermill": {
     "duration": 0.078241,
     "end_time": "2021-10-30T12:26:27.197128",
     "exception": false,
     "start_time": "2021-10-30T12:26:27.118887",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Aggregate rare titles\n",
    "title_dic={\n",
    "    'Mr':'Mr',\n",
    "    'Miss':'Miss',\n",
    "    'Mrs':'Mrs',\n",
    "    'Master':'Master',\n",
    "    'Dr':'Other',\n",
    "    'Rev':'Other',\n",
    "    'Mlle':'Miss',\n",
    "    'Col': 'Other',\n",
    "    'Major':'Other',\n",
    "    'Sir':'Mr',\n",
    "    'Mme':'Miss',\n",
    "    'Jonkheer':'Other',\n",
    "    'Lady':'Miss',\n",
    "    'Capt':'Other',\n",
    "    'Don':'Mr',\n",
    "    'Dona':'Mrs',\n",
    "    'Ms':'Miss',\n",
    "    'the Countess':'Other'\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "87eecc7b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:27.339721Z",
     "iopub.status.busy": "2021-10-30T12:26:27.338844Z",
     "iopub.status.idle": "2021-10-30T12:26:27.674233Z",
     "shell.execute_reply": "2021-10-30T12:26:27.673788Z",
     "shell.execute_reply.started": "2021-10-30T12:23:52.744668Z"
    },
    "papermill": {
     "duration": 0.407178,
     "end_time": "2021-10-30T12:26:27.674374",
     "exception": false,
     "start_time": "2021-10-30T12:26:27.267196",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    title  Survived\n",
      "2      Mr  0.157996\n",
      "4   Other  0.300000\n",
      "0  Master  0.575000\n",
      "1    Miss  0.705882\n",
      "3     Mrs  0.792000\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Use the defined rules to set categories for title\n",
    "data_df['title'] = data_df['title'].map(title_dic)\n",
    "survival_rate(data_df, 'title', 'bar')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b731d99",
   "metadata": {
    "papermill": {
     "duration": 0.069833,
     "end_time": "2021-10-30T12:26:27.813981",
     "exception": false,
     "start_time": "2021-10-30T12:26:27.744148",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"2.2\"></a>\n",
    "## 2.2. Drop irrelevant columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "5635169b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:27.956903Z",
     "iopub.status.busy": "2021-10-30T12:26:27.956009Z",
     "iopub.status.idle": "2021-10-30T12:26:27.961059Z",
     "shell.execute_reply": "2021-10-30T12:26:27.961566Z",
     "shell.execute_reply.started": "2021-10-30T12:23:53.247643Z"
    },
    "papermill": {
     "duration": 0.078043,
     "end_time": "2021-10-30T12:26:27.961717",
     "exception": false,
     "start_time": "2021-10-30T12:26:27.883674",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Irrelevant columns\n",
    "'''\n",
    "PassengerId: Passenger Id is useless for analysis and modeling.\n",
    "Name: Title has already been extracted.\n",
    "Ticket: Ticket seems useless here.\n",
    "'''\n",
    "irrelevant_columns = ['PassengerId', 'Name', 'Ticket']\n",
    "data_preprocessed_df = data_df.drop(irrelevant_columns, axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4885bea2",
   "metadata": {
    "papermill": {
     "duration": 0.072081,
     "end_time": "2021-10-30T12:26:28.103186",
     "exception": false,
     "start_time": "2021-10-30T12:26:28.031105",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"2.3\"></a>\n",
    "## 2.3. Missing Value Detection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "33903217",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:28.248517Z",
     "iopub.status.busy": "2021-10-30T12:26:28.247574Z",
     "iopub.status.idle": "2021-10-30T12:26:28.255981Z",
     "shell.execute_reply": "2021-10-30T12:26:28.256465Z",
     "shell.execute_reply.started": "2021-10-30T12:23:53.255712Z"
    },
    "papermill": {
     "duration": 0.082363,
     "end_time": "2021-10-30T12:26:28.256623",
     "exception": false,
     "start_time": "2021-10-30T12:26:28.174260",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Replace the empty data with NaN\n",
    "data_preprocessed_df.replace(\"\", float(\"NaN\"), inplace=True)\n",
    "data_preprocessed_df.replace(\" \", float(\"NaN\"), inplace=True)\n",
    "\n",
    "# Count missing value(NaN, na, null, None) of each columns, Then transform the result to a pandas dataframe. \n",
    "count_missing_value = data_preprocessed_df.isna().sum() / data_preprocessed_df.shape[0] * 100\n",
    "count_missing_value_df = pd.DataFrame(count_missing_value.sort_values(ascending=False), columns=['Missing%'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a336c8bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:28.403754Z",
     "iopub.status.busy": "2021-10-30T12:26:28.402844Z",
     "iopub.status.idle": "2021-10-30T12:26:28.588039Z",
     "shell.execute_reply": "2021-10-30T12:26:28.588477Z",
     "shell.execute_reply.started": "2021-10-30T12:23:53.272628Z"
    },
    "papermill": {
     "duration": 0.259923,
     "end_time": "2021-10-30T12:26:28.588652",
     "exception": false,
     "start_time": "2021-10-30T12:26:28.328729",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize the percentage(>0) of Missing value in each column.\n",
    "missing_value_df = count_missing_value_df[count_missing_value_df['Missing%'] > 0]\n",
    "\n",
    "plt.figure(figsize=(5, 8)) # Set the figure size\n",
    "missing_value_graph = sns.barplot(x = missing_value_df.index, y = \"Missing%\", data=missing_value_df, orient=\"v\")\n",
    "missing_value_graph.set_title(\"Percentage Missing Value\", fontsize = 20)\n",
    "missing_value_graph.set_xlabel(\"Features\")\n",
    "for p in missing_value_graph.patches:\n",
    "        missing_value_graph.annotate(round(p.get_height(), 2), (p.get_x()+0.25, p.get_height())) #show value on each bar"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19fc01d6",
   "metadata": {
    "papermill": {
     "duration": 0.071175,
     "end_time": "2021-10-30T12:26:28.731357",
     "exception": false,
     "start_time": "2021-10-30T12:26:28.660182",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This is the overall missing value of the whole dataset(train + test)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7afa9c8",
   "metadata": {
    "papermill": {
     "duration": 0.071128,
     "end_time": "2021-10-30T12:26:28.874217",
     "exception": false,
     "start_time": "2021-10-30T12:26:28.803089",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"2.4\"></a>\n",
    "## 2.4. Data Imputation\n",
    "> Choose the suitable imputation tech which can highly represent the central tendency of the data."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37d18483",
   "metadata": {
    "papermill": {
     "duration": 0.069451,
     "end_time": "2021-10-30T12:26:29.014223",
     "exception": false,
     "start_time": "2021-10-30T12:26:28.944772",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"2.4.1\"></a>\n",
    "### 2.4.1. Missing Value Exploratory"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d75854c8",
   "metadata": {
    "papermill": {
     "duration": 0.069737,
     "end_time": "2021-10-30T12:26:29.153726",
     "exception": false,
     "start_time": "2021-10-30T12:26:29.083989",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"2.4.1.1\"></a>\n",
    "### Age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c3bd7d97",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:29.299350Z",
     "iopub.status.busy": "2021-10-30T12:26:29.298760Z",
     "iopub.status.idle": "2021-10-30T12:26:29.400515Z",
     "shell.execute_reply": "2021-10-30T12:26:29.400057Z",
     "shell.execute_reply.started": "2021-10-30T12:23:53.497506Z"
    },
    "papermill": {
     "duration": 0.177123,
     "end_time": "2021-10-30T12:26:29.400649",
     "exception": false,
     "start_time": "2021-10-30T12:26:29.223526",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "        <script type=\"text/javascript\">\n",
       "        window.PlotlyConfig = {MathJaxConfig: 'local'};\n",
       "        if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n",
       "        if (typeof require !== 'undefined') {\n",
       "        require.undef(\"plotly\");\n",
       "        requirejs.config({\n",
       "            paths: {\n",
       "                'plotly': ['https://cdn.plot.ly/plotly-2.2.0.min']\n",
       "            }\n",
       "        });\n",
       "        require(['plotly'], function(Plotly) {\n",
       "            window._Plotly = Plotly;\n",
       "        });\n",
       "        }\n",
       "        </script>\n",
       "        "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>                            <div id=\"91b852b2-768a-4f70-92ce-05cab79305dc\" class=\"plotly-graph-div\" style=\"height:600px; width:800px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"91b852b2-768a-4f70-92ce-05cab79305dc\")) {                    Plotly.newPlot(                        \"91b852b2-768a-4f70-92ce-05cab79305dc\",                        [{\"boxmean\":true,\"name\":\"Age\",\"type\":\"box\",\"y\":[22.0,38.0,26.0,35.0,35.0,null,54.0,2.0,27.0,14.0,4.0,58.0,20.0,39.0,14.0,55.0,2.0,null,31.0,null,35.0,34.0,15.0,28.0,8.0,38.0,null,19.0,null,null,40.0,null,null,66.0,28.0,42.0,null,21.0,18.0,14.0,40.0,27.0,null,3.0,19.0,null,null,null,null,18.0,7.0,21.0,49.0,29.0,65.0,null,21.0,28.5,5.0,11.0,22.0,38.0,45.0,4.0,null,null,29.0,19.0,17.0,26.0,32.0,16.0,21.0,26.0,32.0,25.0,null,null,0.83,30.0,22.0,29.0,null,28.0,17.0,33.0,16.0,null,23.0,24.0,29.0,20.0,46.0,26.0,59.0,null,71.0,23.0,34.0,34.0,28.0,null,21.0,33.0,37.0,28.0,21.0,null,38.0,null,47.0,14.5,22.0,20.0,17.0,21.0,70.5,29.0,24.0,2.0,21.0,null,32.5,32.5,54.0,12.0,null,24.0,null,45.0,33.0,20.0,47.0,29.0,25.0,23.0,19.0,37.0,16.0,24.0,null,22.0,24.0,19.0,18.0,19.0,27.0,9.0,36.5,42.0,51.0,22.0,55.5,40.5,null,51.0,16.0,30.0,null,null,44.0,40.0,26.0,17.0,1.0,9.0,null,45.0,null,28.0,61.0,4.0,1.0,21.0,56.0,18.0,null,50.0,30.0,36.0,null,null,9.0,1.0,4.0,null,null,45.0,40.0,36.0,32.0,19.0,19.0,3.0,44.0,58.0,null,42.0,null,24.0,28.0,null,34.0,45.5,18.0,2.0,32.0,26.0,16.0,40.0,24.0,35.0,22.0,30.0,null,31.0,27.0,42.0,32.0,30.0,16.0,27.0,51.0,null,38.0,22.0,19.0,20.5,18.0,null,35.0,29.0,59.0,5.0,24.0,null,44.0,8.0,19.0,33.0,null,null,29.0,22.0,30.0,44.0,25.0,24.0,37.0,54.0,null,29.0,62.0,30.0,41.0,29.0,null,30.0,35.0,50.0,null,3.0,52.0,40.0,null,36.0,16.0,25.0,58.0,35.0,null,25.0,41.0,37.0,null,63.0,45.0,null,7.0,35.0,65.0,28.0,16.0,19.0,null,33.0,30.0,22.0,42.0,22.0,26.0,19.0,36.0,24.0,24.0,null,23.5,2.0,null,50.0,null,null,19.0,null,null,0.92,null,17.0,30.0,30.0,24.0,18.0,26.0,28.0,43.0,26.0,24.0,54.0,31.0,40.0,22.0,27.0,30.0,22.0,null,36.0,61.0,36.0,31.0,16.0,null,45.5,38.0,16.0,null,null,29.0,41.0,45.0,45.0,2.0,24.0,28.0,25.0,36.0,24.0,40.0,null,3.0,42.0,23.0,null,15.0,25.0,null,28.0,22.0,38.0,null,null,40.0,29.0,45.0,35.0,null,30.0,60.0,null,null,24.0,25.0,18.0,19.0,22.0,3.0,null,22.0,27.0,20.0,19.0,42.0,1.0,32.0,35.0,null,18.0,1.0,36.0,null,17.0,36.0,21.0,28.0,23.0,24.0,22.0,31.0,46.0,23.0,28.0,39.0,26.0,21.0,28.0,20.0,34.0,51.0,3.0,21.0,null,null,null,33.0,null,44.0,null,34.0,18.0,30.0,10.0,null,21.0,29.0,28.0,18.0,null,28.0,19.0,null,32.0,28.0,null,42.0,17.0,50.0,14.0,21.0,24.0,64.0,31.0,45.0,20.0,25.0,28.0,null,4.0,13.0,34.0,5.0,52.0,36.0,null,30.0,49.0,null,29.0,65.0,null,50.0,null,48.0,34.0,47.0,48.0,null,38.0,null,56.0,null,0.75,null,38.0,33.0,23.0,22.0,null,34.0,29.0,22.0,2.0,9.0,null,50.0,63.0,25.0,null,35.0,58.0,30.0,9.0,null,21.0,55.0,71.0,21.0,null,54.0,null,25.0,24.0,17.0,21.0,null,37.0,16.0,18.0,33.0,null,28.0,26.0,29.0,null,36.0,54.0,24.0,47.0,34.0,null,36.0,32.0,30.0,22.0,null,44.0,null,40.5,50.0,null,39.0,23.0,2.0,null,17.0,null,30.0,7.0,45.0,30.0,null,22.0,36.0,9.0,11.0,32.0,50.0,64.0,19.0,null,33.0,8.0,17.0,27.0,null,22.0,22.0,62.0,48.0,null,39.0,36.0,null,40.0,28.0,null,null,24.0,19.0,29.0,null,32.0,62.0,53.0,36.0,null,16.0,19.0,34.0,39.0,null,32.0,25.0,39.0,54.0,36.0,null,18.0,47.0,60.0,22.0,null,35.0,52.0,47.0,null,37.0,36.0,null,49.0,null,49.0,24.0,null,null,44.0,35.0,36.0,30.0,27.0,22.0,40.0,39.0,null,null,null,35.0,24.0,34.0,26.0,4.0,26.0,27.0,42.0,20.0,21.0,21.0,61.0,57.0,21.0,26.0,null,80.0,51.0,32.0,null,9.0,28.0,32.0,31.0,41.0,null,20.0,24.0,2.0,null,0.75,48.0,19.0,56.0,null,23.0,null,18.0,21.0,null,18.0,24.0,null,32.0,23.0,58.0,50.0,40.0,47.0,36.0,20.0,32.0,25.0,null,43.0,null,40.0,31.0,70.0,31.0,null,18.0,24.5,18.0,43.0,36.0,null,27.0,20.0,14.0,60.0,25.0,14.0,19.0,18.0,15.0,31.0,4.0,null,25.0,60.0,52.0,44.0,null,49.0,42.0,18.0,35.0,18.0,25.0,26.0,39.0,45.0,42.0,22.0,null,24.0,null,48.0,29.0,52.0,19.0,38.0,27.0,null,33.0,6.0,17.0,34.0,50.0,27.0,20.0,30.0,null,25.0,25.0,29.0,11.0,null,23.0,23.0,28.5,48.0,35.0,null,null,null,36.0,21.0,24.0,31.0,70.0,16.0,30.0,19.0,31.0,4.0,6.0,33.0,23.0,48.0,0.67,28.0,18.0,34.0,33.0,null,41.0,20.0,36.0,16.0,51.0,null,30.5,null,32.0,24.0,48.0,57.0,null,54.0,18.0,null,5.0,null,43.0,13.0,17.0,29.0,null,25.0,25.0,18.0,8.0,1.0,46.0,null,16.0,null,null,25.0,39.0,49.0,31.0,30.0,30.0,34.0,31.0,11.0,0.42,27.0,31.0,39.0,18.0,39.0,33.0,26.0,39.0,35.0,6.0,30.5,null,23.0,31.0,43.0,10.0,52.0,27.0,38.0,27.0,2.0,null,null,1.0,null,62.0,15.0,0.83,null,23.0,18.0,39.0,21.0,null,32.0,null,20.0,16.0,30.0,34.5,17.0,42.0,null,35.0,28.0,null,4.0,74.0,9.0,16.0,44.0,18.0,45.0,51.0,24.0,null,41.0,21.0,48.0,null,24.0,42.0,27.0,31.0,null,4.0,26.0,47.0,33.0,47.0,28.0,15.0,20.0,19.0,null,56.0,25.0,33.0,22.0,28.0,25.0,39.0,27.0,19.0,null,26.0,32.0,34.5,47.0,62.0,27.0,22.0,14.0,30.0,26.0,18.0,21.0,null,46.0,23.0,63.0,47.0,24.0,35.0,21.0,27.0,45.0,55.0,9.0,null,21.0,48.0,50.0,22.0,22.5,41.0,null,50.0,24.0,33.0,null,30.0,18.5,null,21.0,25.0,null,39.0,null,41.0,30.0,45.0,25.0,45.0,null,60.0,36.0,24.0,27.0,20.0,28.0,null,10.0,35.0,25.0,null,36.0,17.0,32.0,18.0,22.0,13.0,null,18.0,47.0,31.0,60.0,24.0,21.0,29.0,28.5,35.0,32.5,null,55.0,30.0,24.0,6.0,67.0,49.0,null,null,null,27.0,18.0,null,2.0,22.0,null,27.0,null,25.0,25.0,76.0,29.0,20.0,33.0,43.0,27.0,null,26.0,16.0,28.0,21.0,null,null,18.5,41.0,null,36.0,18.5,63.0,18.0,null,1.0,36.0,29.0,12.0,null,35.0,28.0,null,17.0,22.0,null,42.0,24.0,32.0,53.0,null,null,43.0,24.0,26.5,26.0,23.0,40.0,10.0,33.0,61.0,28.0,42.0,31.0,null,22.0,null,30.0,23.0,null,60.5,36.0,13.0,24.0,29.0,23.0,42.0,26.0,null,7.0,26.0,null,41.0,26.0,48.0,18.0,null,22.0,null,27.0,23.0,null,40.0,15.0,20.0,54.0,36.0,64.0,30.0,37.0,18.0,null,27.0,40.0,21.0,17.0,null,40.0,34.0,null,11.5,61.0,8.0,33.0,6.0,18.0,23.0,null,null,0.33,47.0,8.0,25.0,null,35.0,24.0,33.0,25.0,32.0,null,17.0,60.0,38.0,42.0,null,57.0,50.0,null,30.0,21.0,22.0,21.0,53.0,null,23.0,null,40.5,36.0,14.0,21.0,21.0,null,39.0,20.0,64.0,20.0,18.0,48.0,55.0,45.0,45.0,null,null,41.0,22.0,42.0,29.0,null,0.92,20.0,27.0,24.0,32.5,null,null,28.0,19.0,21.0,36.5,21.0,29.0,1.0,30.0,null,null,null,null,17.0,46.0,null,26.0,null,null,20.0,28.0,40.0,30.0,22.0,23.0,0.75,null,9.0,2.0,36.0,null,24.0,null,null,null,30.0,null,53.0,36.0,26.0,1.0,null,30.0,29.0,32.0,null,43.0,24.0,null,64.0,30.0,0.83,55.0,45.0,18.0,22.0,null,37.0,55.0,17.0,57.0,19.0,27.0,22.0,26.0,25.0,26.0,33.0,39.0,23.0,12.0,46.0,29.0,21.0,48.0,39.0,null,19.0,27.0,30.0,32.0,39.0,25.0,null,18.0,32.0,null,58.0,null,16.0,26.0,38.0,24.0,31.0,45.0,25.0,18.0,49.0,0.17,50.0,59.0,null,null,30.0,14.5,24.0,31.0,27.0,25.0,null,null,22.0,45.0,29.0,21.0,31.0,49.0,44.0,54.0,45.0,22.0,21.0,55.0,5.0,null,26.0,null,19.0,null,24.0,24.0,57.0,21.0,6.0,23.0,51.0,13.0,47.0,29.0,18.0,24.0,48.0,22.0,31.0,30.0,38.0,22.0,17.0,43.0,20.0,23.0,50.0,null,3.0,null,37.0,28.0,null,39.0,38.5,null,null]}],                        {\"height\":600,\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"title\":{\"font\":{\"size\":24},\"text\":\"The Distribution of Age\",\"x\":0.5,\"xanchor\":\"center\",\"y\":0.95,\"yanchor\":\"top\"},\"width\":800,\"yaxis\":{\"title\":{\"text\":\"Age\"}}},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('91b852b2-768a-4f70-92ce-05cab79305dc');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize the distribution of Age\n",
    "age_fig = go.Figure()\n",
    "age_fig.add_trace(go.Box(\n",
    "                        y=data_preprocessed_df[\"Age\"],\n",
    "                        name='Age',\n",
    "                        boxmean=True))\n",
    "\n",
    "age_fig.update_layout(\n",
    "                height=600, \n",
    "                width=800,\n",
    "                title={\n",
    "                'text': \"The Distribution of Age\",\n",
    "                'font': {'size': 24},\n",
    "                'y':0.95,\n",
    "                'x':0.5,\n",
    "                'xanchor': 'center',\n",
    "                'yanchor': 'top'},\n",
    "                yaxis_title='Age',\n",
    "                )\n",
    "\n",
    "age_fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2bdf15af",
   "metadata": {
    "papermill": {
     "duration": 0.072714,
     "end_time": "2021-10-30T12:26:29.544983",
     "exception": false,
     "start_time": "2021-10-30T12:26:29.472269",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "It seems overall mean and median of age doesn't differ so much."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "908380b0",
   "metadata": {
    "papermill": {
     "duration": 0.071177,
     "end_time": "2021-10-30T12:26:29.687731",
     "exception": false,
     "start_time": "2021-10-30T12:26:29.616554",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"2.4.1.2\"></a>\n",
    "### Fare"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "962c26aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:29.844351Z",
     "iopub.status.busy": "2021-10-30T12:26:29.839132Z",
     "iopub.status.idle": "2021-10-30T12:26:29.851943Z",
     "shell.execute_reply": "2021-10-30T12:26:29.852386Z",
     "shell.execute_reply.started": "2021-10-30T12:23:53.658592Z"
    },
    "papermill": {
     "duration": 0.091821,
     "end_time": "2021-10-30T12:26:29.852547",
     "exception": false,
     "start_time": "2021-10-30T12:26:29.760726",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>                            <div id=\"0057caa4-63ab-432b-bca4-be535bde6249\" class=\"plotly-graph-div\" style=\"height:600px; width:800px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"0057caa4-63ab-432b-bca4-be535bde6249\")) {                    Plotly.newPlot(                        \"0057caa4-63ab-432b-bca4-be535bde6249\",                        [{\"boxmean\":true,\"name\":\"Fare\",\"type\":\"box\",\"y\":[7.25,71.2833,7.925,53.1,8.05,8.4583,51.8625,21.075,11.1333,30.0708,16.7,26.55,8.05,31.275,7.8542,16.0,29.125,13.0,18.0,7.225,26.0,13.0,8.0292,35.5,21.075,31.3875,7.225,263.0,7.8792,7.8958,27.7208,146.5208,7.75,10.5,82.1708,52.0,7.2292,8.05,18.0,11.2417,9.475,21.0,7.8958,41.5792,7.8792,8.05,15.5,7.75,21.6792,17.8,39.6875,7.8,76.7292,26.0,61.9792,35.5,10.5,7.2292,27.75,46.9,7.2292,80.0,83.475,27.9,27.7208,15.2458,10.5,8.1583,7.925,8.6625,10.5,46.9,73.5,14.4542,56.4958,7.65,7.8958,8.05,29.0,12.475,9.0,9.5,7.7875,47.1,10.5,15.85,34.375,8.05,263.0,8.05,8.05,7.8542,61.175,20.575,7.25,8.05,34.6542,63.3583,23.0,26.0,7.8958,7.8958,77.2875,8.6542,7.925,7.8958,7.65,7.775,7.8958,24.15,52.0,14.4542,8.05,9.825,14.4583,7.925,7.75,21.0,247.5208,31.275,73.5,8.05,30.0708,13.0,77.2875,11.2417,7.75,7.1417,22.3583,6.975,7.8958,7.05,14.5,26.0,13.0,15.0458,26.2833,53.1,9.2167,79.2,15.2458,7.75,15.85,6.75,11.5,36.75,7.7958,34.375,26.0,13.0,12.525,66.6,8.05,14.5,7.3125,61.3792,7.7333,8.05,8.6625,69.55,16.1,15.75,7.775,8.6625,39.6875,20.525,55.0,27.9,25.925,56.4958,33.5,29.125,11.1333,7.925,30.6958,7.8542,25.4667,28.7125,13.0,0.0,69.55,15.05,31.3875,39.0,22.025,50.0,15.5,26.55,15.5,7.8958,13.0,13.0,7.8542,26.0,27.7208,146.5208,7.75,8.4042,7.75,13.0,9.5,69.55,6.4958,7.225,8.05,10.4625,15.85,18.7875,7.75,31.0,7.05,21.0,7.25,13.0,7.75,113.275,7.925,27.0,76.2917,10.5,8.05,13.0,8.05,7.8958,90.0,9.35,10.5,7.25,13.0,25.4667,83.475,7.775,13.5,31.3875,10.5,7.55,26.0,26.25,10.5,12.275,14.4542,15.5,10.5,7.125,7.225,90.0,7.775,14.5,52.5542,26.0,7.25,10.4625,26.55,16.1,20.2125,15.2458,79.2,86.5,512.3292,26.0,7.75,31.3875,79.65,0.0,7.75,10.5,39.6875,7.775,153.4625,135.6333,31.0,0.0,19.5,29.7,7.75,77.9583,7.75,0.0,29.125,20.25,7.75,7.8542,9.5,8.05,26.0,8.6625,9.5,7.8958,13.0,7.75,78.85,91.0792,12.875,8.85,7.8958,27.7208,7.2292,151.55,30.5,247.5208,7.75,23.25,0.0,12.35,8.05,151.55,110.8833,108.9,24.0,56.9292,83.1583,262.375,26.0,7.8958,26.25,7.8542,26.0,14.0,164.8667,134.5,7.25,7.8958,12.35,29.0,69.55,135.6333,6.2375,13.0,20.525,57.9792,23.25,28.5,153.4625,18.0,133.65,7.8958,66.6,134.5,8.05,35.5,26.0,263.0,13.0,13.0,13.0,13.0,13.0,16.1,15.9,8.6625,9.225,35.0,7.2292,17.8,7.225,9.5,55.0,13.0,7.8792,7.8792,27.9,27.7208,14.4542,7.05,15.5,7.25,75.25,7.2292,7.75,69.3,55.4417,6.4958,8.05,135.6333,21.075,82.1708,7.25,211.5,4.0125,7.775,227.525,15.7417,7.925,52.0,7.8958,73.5,46.9,13.0,7.7292,12.0,120.0,7.7958,7.925,113.275,16.7,7.7958,7.8542,26.0,10.5,12.65,7.925,8.05,9.825,15.85,8.6625,21.0,7.75,18.75,7.775,25.4667,7.8958,6.8583,90.0,0.0,7.925,8.05,32.5,13.0,13.0,24.15,7.8958,7.7333,7.875,14.4,20.2125,7.25,26.0,26.0,7.75,8.05,26.55,16.1,26.0,7.125,55.9,120.0,34.375,18.75,263.0,10.5,26.25,9.5,7.775,13.0,8.1125,81.8583,19.5,26.55,19.2583,30.5,27.75,19.9667,27.75,89.1042,8.05,7.8958,26.55,51.8625,10.5,7.75,26.55,8.05,38.5,13.0,8.05,7.05,0.0,26.55,7.725,19.2583,7.25,8.6625,27.75,13.7917,9.8375,52.0,21.0,7.0458,7.5208,12.2875,46.9,0.0,8.05,9.5875,91.0792,25.4667,90.0,29.7,8.05,15.9,19.9667,7.25,30.5,49.5042,8.05,14.4583,78.2667,15.1,151.55,7.7958,8.6625,7.75,7.6292,9.5875,86.5,108.9,26.0,26.55,22.525,56.4958,7.75,8.05,26.2875,59.4,7.4958,34.0208,10.5,24.15,26.0,7.8958,93.5,7.8958,7.225,57.9792,7.2292,7.75,10.5,221.7792,7.925,11.5,26.0,7.2292,7.2292,22.3583,8.6625,26.25,26.55,106.425,14.5,49.5,71.0,31.275,31.275,26.0,106.425,26.0,26.0,13.8625,20.525,36.75,110.8833,26.0,7.8292,7.225,7.775,26.55,39.6,227.525,79.65,17.4,7.75,7.8958,13.5,8.05,8.05,24.15,7.8958,21.075,7.2292,7.8542,10.5,51.4792,26.3875,7.75,8.05,14.5,13.0,55.9,14.4583,7.925,30.0,110.8833,26.0,40.125,8.7125,79.65,15.0,79.2,8.05,8.05,7.125,78.2667,7.25,7.75,26.0,24.15,33.0,0.0,7.225,56.9292,27.0,7.8958,42.4,8.05,26.55,15.55,7.8958,30.5,41.5792,153.4625,31.275,7.05,15.5,7.75,8.05,65.0,14.4,16.1,39.0,10.5,14.4542,52.5542,15.7417,7.8542,16.1,32.3208,12.35,77.9583,7.8958,7.7333,30.0,7.0542,30.5,0.0,27.9,13.0,7.925,26.25,39.6875,16.1,7.8542,69.3,27.9,56.4958,19.2583,76.7292,7.8958,35.5,7.55,7.55,7.8958,23.0,8.4333,7.8292,6.75,73.5,7.8958,15.5,13.0,113.275,133.65,7.225,25.5875,7.4958,7.925,73.5,13.0,7.775,8.05,52.0,39.0,52.0,10.5,13.0,0.0,7.775,8.05,9.8417,46.9,512.3292,8.1375,76.7292,9.225,46.9,39.0,41.5792,39.6875,10.1708,7.7958,211.3375,57.0,13.4167,56.4958,7.225,26.55,13.5,8.05,7.7333,110.8833,7.65,227.525,26.2875,14.4542,7.7417,7.8542,26.0,13.5,26.2875,151.55,15.2458,49.5042,26.55,52.0,9.4833,13.0,7.65,227.525,10.5,15.5,7.775,33.0,7.0542,13.0,13.0,53.1,8.6625,21.0,7.7375,26.0,7.925,211.3375,18.7875,0.0,13.0,13.0,16.1,34.375,512.3292,7.8958,7.8958,30.0,78.85,262.375,16.1,7.925,71.0,20.25,13.0,53.1,7.75,23.0,12.475,9.5,7.8958,65.0,14.5,7.7958,11.5,8.05,86.5,14.5,7.125,7.2292,120.0,7.775,77.9583,39.6,7.75,24.15,8.3625,9.5,7.8542,10.5,7.225,23.0,7.75,7.75,12.475,7.7375,211.3375,7.2292,57.0,30.0,23.45,7.05,7.25,7.4958,29.125,20.575,79.2,7.75,26.0,69.55,30.6958,7.8958,13.0,25.9292,8.6833,7.2292,24.15,13.0,26.25,120.0,8.5167,6.975,7.775,0.0,7.775,13.0,53.1,7.8875,24.15,10.5,31.275,8.05,0.0,7.925,37.0042,6.45,27.9,93.5,8.6625,0.0,12.475,39.6875,6.95,56.4958,37.0042,7.75,80.0,14.4542,18.75,7.2292,7.8542,8.3,83.1583,8.6625,8.05,56.4958,29.7,7.925,10.5,31.0,6.4375,8.6625,7.55,69.55,7.8958,33.0,89.1042,31.275,7.775,15.2458,39.4,26.0,9.35,164.8667,26.55,19.2583,7.2292,14.1083,11.5,25.9292,69.55,13.0,13.0,13.8583,50.4958,9.5,11.1333,7.8958,52.5542,5.0,9.0,24.0,7.225,9.8458,7.8958,7.8958,83.1583,26.0,7.8958,10.5167,10.5,7.05,29.125,13.0,30.0,23.45,30.0,7.75,7.8292,7.0,9.6875,8.6625,12.2875,9.225,7.6292,29.0,7.2292,24.15,7.8958,26.0,82.2667,26.0,61.175,27.7208,12.35,7.225,7.925,7.225,59.4,3.1708,31.6833,61.3792,262.375,14.5,61.9792,7.225,30.5,21.6792,26.0,31.5,20.575,23.45,57.75,7.2292,8.05,8.6625,9.5,56.4958,13.4167,26.55,7.85,13.0,52.5542,7.925,29.7,7.75,76.2917,15.9,60.0,15.0333,23.0,263.0,15.5792,29.125,7.8958,7.65,16.1,262.375,7.8958,13.5,7.75,7.725,262.375,21.0,7.8792,42.4,28.5375,263.0,7.75,7.8958,7.925,27.7208,211.5,211.5,8.05,25.7,13.0,7.75,15.2458,221.7792,26.0,7.8958,10.7083,14.4542,7.8792,8.05,7.75,23.0,13.9,7.775,52.0,8.05,26.0,7.7958,78.85,7.925,7.8542,8.05,55.4417,26.0,7.75,7.775,8.5167,22.525,7.8208,7.75,8.7125,13.0,15.0458,7.7792,31.6792,7.2833,221.7792,14.4542,6.4375,16.7,75.2417,26.0,15.75,7.75,57.75,7.25,7.75,16.1,7.7958,23.25,13.0,8.05,8.05,28.5,25.4667,6.4375,7.8958,7.8542,7.225,13.0,8.05,46.9,46.9,151.55,262.375,26.0,26.55,18.0,51.8625,8.05,26.55,26.0,83.1583,7.8958,null,12.1833,31.3875,7.55,221.7792,7.8542,26.55,13.775,7.7333,15.2458,13.5,7.0,13.0,22.025,50.4958,34.375,27.7208,8.9625,7.55,7.225,13.9,7.2292,31.3875,39.0,36.75,55.4417,39.0,83.1583,13.0,83.1583,53.1,7.75,247.5208,16.0,21.0,8.05,69.55,13.0,26.0,26.0,14.5,12.35,32.5,7.8542,134.5,7.775,10.5,8.1125,15.5,14.4,227.525,26.0,10.5,25.7417,7.75,10.5,27.7208,7.8958,22.525,7.05,73.5,26.0,7.775,42.5,7.8792,164.8667,211.5,8.05,13.8583,8.05,10.5,7.7958,27.4458,15.2458,7.7958,7.75,15.1,13.0,65.0,26.55,6.4958,7.8792,71.2833,7.8542,75.25,7.225,13.0,106.425,27.7208,30.0,134.5,7.8875,23.45,51.8625,21.0,32.5,26.0,14.4542,27.75,7.925,136.7792,9.325,9.5,7.55,7.75,8.05,13.0,7.775,17.4,7.8542,23.0,12.1833,12.7375,7.8958,0.0,7.55,8.05,8.6625,75.2417,7.75,136.7792,15.5,7.225,26.0,10.5,26.0,21.0,10.5,8.6625,13.775,7.75,15.2458,20.2125,7.25,7.25,82.2667,7.2292,8.05,39.6,6.95,7.2292,81.8583,9.5,7.8958,41.5792,21.6792,45.5,7.8542,7.775,15.0458,21.0,8.6625,7.75,26.55,151.55,9.35,93.5,14.1083,8.6625,7.225,7.575,7.75,135.6333,7.7333,146.5208,10.5,7.8542,31.5,7.775,7.2292,13.0,26.55,211.3375,7.05,39.0,79.2,26.0,13.0,36.75,29.7,7.225,15.7417,7.8958,26.0,13.0,7.2292,31.5,7.2292,10.5,7.5792,69.55,512.3292,14.5,7.65,13.0,7.2292,13.5,21.0,63.3583,10.5,73.5,65.0,20.575,26.0,51.4792,7.8792,7.75,15.55,69.55,37.0042,21.0,8.6625,55.4417,69.55,14.4583,39.6875,59.4,13.8583,11.5,134.5,0.0,13.0,81.8583,262.375,8.6625,11.5,50.0,31.3875,7.75,7.8792,14.5,16.1,12.875,65.0,7.775,13.0,7.75,21.075,93.5,39.4,20.25,10.5,22.025,60.0,7.25,79.2,7.775,7.7333,164.8667,21.0,59.4,47.1,27.7208,13.8625,10.5,211.5,7.7208,13.775,7.75,90.0,7.775,8.05,108.9,7.25,8.05,22.3583]}],                        {\"height\":600,\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"title\":{\"font\":{\"size\":24},\"text\":\"The Distribution of Fare\",\"x\":0.5,\"xanchor\":\"center\",\"y\":0.95,\"yanchor\":\"top\"},\"width\":800,\"yaxis\":{\"title\":{\"text\":\"Fare\"}}},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('0057caa4-63ab-432b-bca4-be535bde6249');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize the distribution of Fare\n",
    "fare_fig = go.Figure()\n",
    "fare_fig.add_trace(go.Box(\n",
    "                        y=data_preprocessed_df[\"Fare\"],\n",
    "                        name='Fare',\n",
    "                        boxmean=True))\n",
    "\n",
    "fare_fig.update_layout(\n",
    "                height=600, \n",
    "                width=800,\n",
    "                title={\n",
    "                'text': \"The Distribution of Fare\",\n",
    "                'font': {'size': 24},\n",
    "                'y':0.95,\n",
    "                'x':0.5,\n",
    "                'xanchor': 'center',\n",
    "                'yanchor': 'top'},\n",
    "                yaxis_title='Fare',\n",
    "                )\n",
    "\n",
    "fare_fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44b7f8de",
   "metadata": {
    "papermill": {
     "duration": 0.073456,
     "end_time": "2021-10-30T12:26:29.999905",
     "exception": false,
     "start_time": "2021-10-30T12:26:29.926449",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "It seems mean and median of age does differ so much. However, it is only 1 Missing value, it should not affect the modelling process so much."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5bf85f2f",
   "metadata": {
    "papermill": {
     "duration": 0.073523,
     "end_time": "2021-10-30T12:26:30.147086",
     "exception": false,
     "start_time": "2021-10-30T12:26:30.073563",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"2.4.1.3\"></a>\n",
    "### Embarked"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "c0f290aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:30.297835Z",
     "iopub.status.busy": "2021-10-30T12:26:30.297214Z",
     "iopub.status.idle": "2021-10-30T12:26:31.159076Z",
     "shell.execute_reply": "2021-10-30T12:26:31.159497Z",
     "shell.execute_reply.started": "2021-10-30T12:23:53.682374Z"
    },
    "papermill": {
     "duration": 0.939199,
     "end_time": "2021-10-30T12:26:31.159661",
     "exception": false,
     "start_time": "2021-10-30T12:26:30.220462",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>                            <div id=\"f675dc0b-daca-4130-b9c1-9a5223c8cfb0\" class=\"plotly-graph-div\" style=\"height:600px; width:800px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"f675dc0b-daca-4130-b9c1-9a5223c8cfb0\")) {                    Plotly.newPlot(                        \"f675dc0b-daca-4130-b9c1-9a5223c8cfb0\",                        [{\"alignmentgroup\":\"True\",\"bingroup\":\"x\",\"hovertemplate\":\"Embarked=%{x}<br>count=%{y}<extra></extra>\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\",\"pattern\":{\"shape\":\"\"}},\"name\":\"\",\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"type\":\"histogram\",\"x\":[\"S\",\"C\",\"S\",\"S\",\"S\",\"Q\",\"S\",\"S\",\"S\",\"C\",\"S\",\"S\",\"S\",\"S\",\"S\",\"S\",\"Q\",\"S\",\"S\",\"C\",\"S\",\"S\",\"Q\",\"S\",\"S\",\"S\",\"C\",\"S\",\"Q\",\"S\",\"C\",\"C\",\"Q\",\"S\",\"C\",\"S\",\"C\",\"S\",\"S\",\"C\",\"S\",\"S\",\"C\",\"C\",\"Q\",\"S\",\"Q\",\"Q\",\"C\",\"S\",\"S\",\"S\",\"C\",\"S\",\"C\",\"S\",\"S\",\"C\",\"S\",\"S\",\"C\",nullnullxaxis\":\"x\",\"yaxis\":\"y\"}],                        {\"barmode\":\"relative\",\"height\":600,\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60},\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"title\":{\"font\":{\"size\":24},\"text\":\"The count of Embarked\",\"x\":0.5,\"xanchor\":\"center\",\"y\":0.95,\"yanchor\":\"top\"},\"width\":800,\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Embarked\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"count\"}}},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('f675dc0b-daca-4130-b9c1-9a5223c8cfb0');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize the distribution of Embarked\n",
    "embarked_fig = px.histogram(data_preprocessed_df, x=\"Embarked\")\n",
    "embarked_fig.update_layout(\n",
    "                height=600, \n",
    "                width=800,\n",
    "                title={\n",
    "                'text': \"The count of Embarked\",\n",
    "                'font': {'size': 24},\n",
    "                'y':0.95,\n",
    "                'x':0.5,\n",
    "                'xanchor': 'center',\n",
    "                'yanchor': 'top'},\n",
    "                )\n",
    "\n",
    "embarked_fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e94a841",
   "metadata": {
    "papermill": {
     "duration": 0.074367,
     "end_time": "2021-10-30T12:26:31.309397",
     "exception": false,
     "start_time": "2021-10-30T12:26:31.235030",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "It seems S is the most frequent value of Embarked.  \n",
    "**It seems that we can try simplely use Median imputation on *Age* and *Fare* and Majority value imputation on *Embarked*.**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "206552f7",
   "metadata": {
    "papermill": {
     "duration": 0.072076,
     "end_time": "2021-10-30T12:26:31.455984",
     "exception": false,
     "start_time": "2021-10-30T12:26:31.383908",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"2.4.1.4\"></a>\n",
    "### Cabin"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "d734928e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:31.605128Z",
     "iopub.status.busy": "2021-10-30T12:26:31.604569Z",
     "iopub.status.idle": "2021-10-30T12:26:31.616311Z",
     "shell.execute_reply": "2021-10-30T12:26:31.615887Z",
     "shell.execute_reply.started": "2021-10-30T12:23:54.734520Z"
    },
    "papermill": {
     "duration": 0.087933,
     "end_time": "2021-10-30T12:26:31.616437",
     "exception": false,
     "start_time": "2021-10-30T12:26:31.528504",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Cabin\n",
       "False    0.666667\n",
       "True     0.299854\n",
       "Name: Survived, dtype: float64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate the relationship between Cabin and Survived Rate\n",
    "data_preprocessed_df.groupby(data_preprocessed_df['Cabin'].isnull())['Survived'].mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa992fa1",
   "metadata": {
    "papermill": {
     "duration": 0.073208,
     "end_time": "2021-10-30T12:26:31.762577",
     "exception": false,
     "start_time": "2021-10-30T12:26:31.689369",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "It seems people who have Carbin information are likely to survive."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f1228f56",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:31.911408Z",
     "iopub.status.busy": "2021-10-30T12:26:31.910802Z",
     "iopub.status.idle": "2021-10-30T12:26:31.916718Z",
     "shell.execute_reply": "2021-10-30T12:26:31.917194Z",
     "shell.execute_reply.started": "2021-10-30T12:23:54.752236Z"
    },
    "papermill": {
     "duration": 0.081765,
     "end_time": "2021-10-30T12:26:31.917355",
     "exception": false,
     "start_time": "2021-10-30T12:26:31.835590",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Transform Carbin information to an indicator representing whether passenger have Carbin information.\n",
    "data_preprocessed_df['Cabin_indicator'] = np.where(data_preprocessed_df['Cabin'].isnull(), 0, 1)\n",
    "data_preprocessed_df.drop('Cabin', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d85459bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:32.075191Z",
     "iopub.status.busy": "2021-10-30T12:26:32.074499Z",
     "iopub.status.idle": "2021-10-30T12:26:32.095584Z",
     "shell.execute_reply": "2021-10-30T12:26:32.096069Z",
     "shell.execute_reply.started": "2021-10-30T12:23:54.763519Z"
    },
    "papermill": {
     "duration": 0.104033,
     "end_time": "2021-10-30T12:26:32.096224",
     "exception": false,
     "start_time": "2021-10-30T12:26:31.992191",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>title</th>\n",
       "      <th>Cabin_indicator</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>S</td>\n",
       "      <td>Mr</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>S</td>\n",
       "      <td>Miss</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>S</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>S</td>\n",
       "      <td>Mr</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>413</th>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>S</td>\n",
       "      <td>Mr</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>414</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>39.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>108.9000</td>\n",
       "      <td>C</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>415</th>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>38.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>S</td>\n",
       "      <td>Mr</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>416</th>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>S</td>\n",
       "      <td>Mr</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>417</th>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>22.3583</td>\n",
       "      <td>C</td>\n",
       "      <td>Master</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1309 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Survived  Pclass     Sex   Age  SibSp  Parch      Fare Embarked   title  \\\n",
       "0         0.0       3    male  22.0      1      0    7.2500        S      Mr   \n",
       "1         1.0       1  female  38.0      1      0   71.2833        C     Mrs   \n",
       "2         1.0       3  female  26.0      0      0    7.9250        S    Miss   \n",
       "3         1.0       1  female  35.0      1      0   53.1000        S     Mrs   \n",
       "4         0.0       3    male  35.0      0      0    8.0500        S      Mr   \n",
       "..        ...     ...     ...   ...    ...    ...       ...      ...     ...   \n",
       "413       NaN       3    male   NaN      0      0    8.0500        S      Mr   \n",
       "414       NaN       1  female  39.0      0      0  108.9000        C     Mrs   \n",
       "415       NaN       3    male  38.5      0      0    7.2500        S      Mr   \n",
       "416       NaN       3    male   NaN      0      0    8.0500        S      Mr   \n",
       "417       NaN       3    male   NaN      1      1   22.3583        C  Master   \n",
       "\n",
       "     Cabin_indicator  \n",
       "0                  0  \n",
       "1                  1  \n",
       "2                  0  \n",
       "3                  1  \n",
       "4                  0  \n",
       "..               ...  \n",
       "413                0  \n",
       "414                1  \n",
       "415                0  \n",
       "416                0  \n",
       "417                0  \n",
       "\n",
       "[1309 rows x 10 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_preprocessed_df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4ae466e",
   "metadata": {
    "papermill": {
     "duration": 0.074945,
     "end_time": "2021-10-30T12:26:32.247085",
     "exception": false,
     "start_time": "2021-10-30T12:26:32.172140",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"2.4.2\"></a>\n",
    "### 2.4.2. Median imputation "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "1aa3c567",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:32.400741Z",
     "iopub.status.busy": "2021-10-30T12:26:32.400104Z",
     "iopub.status.idle": "2021-10-30T12:26:33.037883Z",
     "shell.execute_reply": "2021-10-30T12:26:33.038348Z",
     "shell.execute_reply.started": "2021-10-30T12:23:54.799372Z"
    },
    "papermill": {
     "duration": 0.716322,
     "end_time": "2021-10-30T12:26:33.038507",
     "exception": false,
     "start_time": "2021-10-30T12:26:32.322185",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Pearson Correlation')"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x648 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Find correlated column with Age\n",
    "plt.figure(figsize=(12,9))\n",
    "sns.heatmap(data_preprocessed_df.corr(), cmap=\"coolwarm\", annot = True, fmt='.3f').set_title('Pearson Correlation', fontsize=22)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "a79293a1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:33.194353Z",
     "iopub.status.busy": "2021-10-30T12:26:33.193502Z",
     "iopub.status.idle": "2021-10-30T12:26:33.203409Z",
     "shell.execute_reply": "2021-10-30T12:26:33.203905Z",
     "shell.execute_reply.started": "2021-10-30T12:23:55.594867Z"
    },
    "papermill": {
     "duration": 0.088595,
     "end_time": "2021-10-30T12:26:33.204059",
     "exception": false,
     "start_time": "2021-10-30T12:26:33.115464",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data_preprocessed_median_df = data_preprocessed_df.copy()\n",
    "#data_preprocessed_median_df['Age'] = data_preprocessed_df['Age'].fillna(data_preprocessed_df['Age'].median())\n",
    "# Group imputation for Age by 'Pclass' and 'Sex'\n",
    "data_preprocessed_median_df[\"Age\"].fillna(data_preprocessed_median_df.groupby(['Pclass','Sex'])['Age'].transform(\"median\"), inplace=True)\n",
    "data_preprocessed_median_df['Fare'] = data_preprocessed_df['Fare'].fillna(data_preprocessed_df['Fare'].median())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1abbfeaf",
   "metadata": {
    "papermill": {
     "duration": 0.076182,
     "end_time": "2021-10-30T12:26:33.357438",
     "exception": false,
     "start_time": "2021-10-30T12:26:33.281256",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"2.4.3\"></a>\n",
    "### 2.4.3. Majority value imputation "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "a7caa9dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:33.515198Z",
     "iopub.status.busy": "2021-10-30T12:26:33.514426Z",
     "iopub.status.idle": "2021-10-30T12:26:33.518645Z",
     "shell.execute_reply": "2021-10-30T12:26:33.519231Z",
     "shell.execute_reply.started": "2021-10-30T12:23:55.608960Z"
    },
    "papermill": {
     "duration": 0.086688,
     "end_time": "2021-10-30T12:26:33.519454",
     "exception": false,
     "start_time": "2021-10-30T12:26:33.432766",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Missing value:\n",
      " Median imputation: 418\n"
     ]
    }
   ],
   "source": [
    "data_preprocessed_median_df['Embarked'].fillna(data_preprocessed_median_df['Embarked'].mode()[0], inplace=True)\n",
    "# Check Missing value for\n",
    "print(f'Missing value:\\n Median imputation: {sum(data_preprocessed_median_df.isna().sum())}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f1a0cc2",
   "metadata": {
    "papermill": {
     "duration": 0.075341,
     "end_time": "2021-10-30T12:26:33.673097",
     "exception": false,
     "start_time": "2021-10-30T12:26:33.597756",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "418 is the number of survived passenger in test data. Therefore, it means no Missing value in the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "f2d474b2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:33.828260Z",
     "iopub.status.busy": "2021-10-30T12:26:33.827402Z",
     "iopub.status.idle": "2021-10-30T12:26:33.836948Z",
     "shell.execute_reply": "2021-10-30T12:26:33.837393Z",
     "shell.execute_reply.started": "2021-10-30T12:23:55.630494Z"
    },
    "papermill": {
     "duration": 0.088504,
     "end_time": "2021-10-30T12:26:33.837550",
     "exception": false,
     "start_time": "2021-10-30T12:26:33.749046",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Cut the Age and Fare into bins. Set labels by alphabetically for later encoding.\n",
    "data_preprocessed_median_df['AgeBin'] = pd.cut(data_preprocessed_median_df['Age'].astype(int), 5, labels=['a', 'b', 'c', 'd','e'])\n",
    "data_preprocessed_median_df['FareBin'] = pd.cut(data_preprocessed_median_df['Fare'].astype(int), 4, labels=['a', 'b', 'c', 'd'])\n",
    "\n",
    "# Women and Children indicator\n",
    "#data_preprocessed_median_df['WomChi'] = ((data_preprocessed_median_df.AgeBin == 'a') | (data_preprocessed_median_df.Sex == 'female'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "aa3db6d4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:33.994317Z",
     "iopub.status.busy": "2021-10-30T12:26:33.993743Z",
     "iopub.status.idle": "2021-10-30T12:26:33.996384Z",
     "shell.execute_reply": "2021-10-30T12:26:33.995835Z",
     "shell.execute_reply.started": "2021-10-30T12:23:55.648052Z"
    },
    "papermill": {
     "duration": 0.083312,
     "end_time": "2021-10-30T12:26:33.996508",
     "exception": false,
     "start_time": "2021-10-30T12:26:33.913196",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Create a new dataset only include training data.\n",
    "data_best_df = data_preprocessed_median_df.iloc[:891].copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "273e4848",
   "metadata": {
    "papermill": {
     "duration": 0.075095,
     "end_time": "2021-10-30T12:26:34.149595",
     "exception": false,
     "start_time": "2021-10-30T12:26:34.074500",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"3\"></a>\n",
    "# 3. Data Analysis\n",
    "* Sex, Pclass, SibSp, Parch, Embarked - Pie\n",
    "* Age, Fare - Boxplot\n",
    "* Survival Rate - Barplot/Lineplot"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c2084cc",
   "metadata": {
    "papermill": {
     "duration": 0.076302,
     "end_time": "2021-10-30T12:26:34.302585",
     "exception": false,
     "start_time": "2021-10-30T12:26:34.226283",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"3.1\"></a>\n",
    "## 3.1. What is the distribution of survival?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "53d77f9f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:34.458204Z",
     "iopub.status.busy": "2021-10-30T12:26:34.457585Z",
     "iopub.status.idle": "2021-10-30T12:26:34.463667Z",
     "shell.execute_reply": "2021-10-30T12:26:34.463222Z",
     "shell.execute_reply.started": "2021-10-30T12:23:55.659617Z"
    },
    "papermill": {
     "duration": 0.084391,
     "end_time": "2021-10-30T12:26:34.463797",
     "exception": false,
     "start_time": "2021-10-30T12:26:34.379406",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Count the number of survived(0/1), transform the result to pandas dataframe\n",
    "survival_counts = data_best_df[\"Survived\"].value_counts()\n",
    "survival_counts_df = pd.DataFrame(survival_counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "f0dbc3e1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:34.622085Z",
     "iopub.status.busy": "2021-10-30T12:26:34.621301Z",
     "iopub.status.idle": "2021-10-30T12:26:34.673733Z",
     "shell.execute_reply": "2021-10-30T12:26:34.673233Z",
     "shell.execute_reply.started": "2021-10-30T12:23:55.678453Z"
    },
    "papermill": {
     "duration": 0.134514,
     "end_time": "2021-10-30T12:26:34.673881",
     "exception": false,
     "start_time": "2021-10-30T12:26:34.539367",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>                            <div id=\"9e59c310-889c-4328-b7a5-42f1a73d89ae\" class=\"plotly-graph-div\" style=\"height:600px; width:1000px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"9e59c310-889c-4328-b7a5-42f1a73d89ae\")) {                    Plotly.newPlot(                        \"9e59c310-889c-4328-b7a5-42f1a73d89ae\",                        [{\"showlegend\":false,\"text\":[\"549\",\"342\"],\"textposition\":\"outside\",\"type\":\"bar\",\"x\":[0.0,1.0],\"xaxis\":\"x\",\"y\":[549,342],\"yaxis\":\"y\"},{\"domain\":{\"x\":[0.55,1.0],\"y\":[0.0,1.0]},\"labels\":[0.0,1.0],\"showlegend\":true,\"type\":\"pie\",\"values\":[549,342]}],                        {\"height\":600,\"legend\":{\"title\":{\"text\":\"Survived\"}},\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"title\":{\"font\":{\"size\":24},\"text\":\"The distribution of Survival\",\"x\":0.5,\"xanchor\":\"center\",\"y\":0.95,\"yanchor\":\"top\"},\"width\":1000,\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,0.45],\"title\":{\"text\":\"Survived\"},\"type\":\"category\"},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Counts\"}}},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('9e59c310-889c-4328-b7a5-42f1a73d89ae');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize the distribution of the survival\n",
    "survival_fig = make_subplots(\n",
    "    rows=1, cols=2, \n",
    "    specs=[[{\"type\": \"xy\"}, {\"type\": \"domain\"}]])\n",
    "\n",
    "survival_fig.add_trace(go.Bar(x=survival_counts_df.index, \n",
    "                              y=survival_counts_df[\"Survived\"],\n",
    "                              text=survival_counts_df[\"Survived\"],\n",
    "                              textposition='outside',\n",
    "                              showlegend=False),\n",
    "                              1, 1)\n",
    "\n",
    "survival_fig.add_trace(go.Pie(labels=survival_counts_df.index, \n",
    "                     values=survival_counts_df[\"Survived\"],\n",
    "                     showlegend=True),\n",
    "                     1, 2)\n",
    "\n",
    "survival_fig.update_layout(\n",
    "                  height=600, \n",
    "                  width=1000,\n",
    "                  title={\n",
    "                  'text': \"The distribution of Survival\",\n",
    "                  'font': {'size': 24},\n",
    "                  'y':0.95,\n",
    "                  'x':0.5,\n",
    "                  'xanchor': 'center',\n",
    "                  'yanchor': 'top'},\n",
    "                  xaxis1_title = 'Survived', \n",
    "                  yaxis1_title = 'Counts',\n",
    "                  legend_title_text=\"Survived\"\n",
    "                 )\n",
    "survival_fig.update_xaxes(type='category')\n",
    "survival_fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "11131912",
   "metadata": {
    "papermill": {
     "duration": 0.075846,
     "end_time": "2021-10-30T12:26:34.826379",
     "exception": false,
     "start_time": "2021-10-30T12:26:34.750533",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "* The Label(Survived) is imbalanced. The survived passenger makes up 1/3 of the total number."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0033b7ff",
   "metadata": {
    "papermill": {
     "duration": 0.075526,
     "end_time": "2021-10-30T12:26:34.977973",
     "exception": false,
     "start_time": "2021-10-30T12:26:34.902447",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"3.2\"></a>\n",
    "## 3.2. What is the distribution of Sex on survival?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "928e49b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:35.160981Z",
     "iopub.status.busy": "2021-10-30T12:26:35.160072Z",
     "iopub.status.idle": "2021-10-30T12:26:35.168190Z",
     "shell.execute_reply": "2021-10-30T12:26:35.168775Z",
     "shell.execute_reply.started": "2021-10-30T12:23:55.746661Z"
    },
    "papermill": {
     "duration": 0.10844,
     "end_time": "2021-10-30T12:26:35.168961",
     "exception": false,
     "start_time": "2021-10-30T12:26:35.060521",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Visualize the categorical data by Pie chart\n",
    "'''\n",
    "Description:\n",
    "Args:\n",
    "    data: The dataset is going to be visualized\n",
    "    feature: The chosen feature\n",
    "Return: None\n",
    "'''\n",
    "def categorical_VIS(data, feature):\n",
    "    \n",
    "    # Calculate the distribution of the chosen feature\n",
    "    survived = data[data[\"Survived\"] == 1][feature]\n",
    "    survived_df = pd.DataFrame(survived.value_counts())\n",
    "    not_survived = data[data[\"Survived\"] == 0][feature]\n",
    "    not_survived_df = pd.DataFrame(not_survived.value_counts())\n",
    "    \n",
    "    # Visualization\n",
    "    survival_fig = make_subplots(\n",
    "    rows=1, cols=2, \n",
    "    subplot_titles=(\"Survived\", \"Non-Survived\"),\n",
    "    specs=[[{\"type\": \"domain\"}, {\"type\": \"domain\"}]])\n",
    "    survival_fig.add_trace(go.Pie(labels=survived_df.index, \n",
    "                     values=survived_df[feature],\n",
    "                     showlegend=True),\n",
    "                     1, 1)\n",
    "    survival_fig.add_trace(go.Pie(labels=not_survived_df.index, \n",
    "                     values=not_survived_df[feature],\n",
    "                     showlegend=True),\n",
    "                     1, 2)\n",
    "    survival_fig.update_layout(\n",
    "                  height=600, \n",
    "                  width=1000,\n",
    "                  title={\n",
    "                  'text': \"The Distribution of \"+ feature + \" on Survival\",\n",
    "                  'font': {'size': 24},\n",
    "                  'y':0.95,\n",
    "                  'x':0.5,\n",
    "                  'xanchor': 'center',\n",
    "                  'yanchor': 'top'},\n",
    "                  legend_title_text=feature\n",
    "                 )\n",
    "    survival_fig.update_xaxes(type='category')\n",
    "    survival_fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "b32afbce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:35.329178Z",
     "iopub.status.busy": "2021-10-30T12:26:35.328304Z",
     "iopub.status.idle": "2021-10-30T12:26:35.368375Z",
     "shell.execute_reply": "2021-10-30T12:26:35.367755Z",
     "shell.execute_reply.started": "2021-10-30T12:23:55.758530Z"
    },
    "papermill": {
     "duration": 0.122208,
     "end_time": "2021-10-30T12:26:35.368501",
     "exception": false,
     "start_time": "2021-10-30T12:26:35.246293",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>                            <div id=\"2c321a8f-7f84-43fe-9165-8ea8222ab350\" class=\"plotly-graph-div\" style=\"height:600px; width:1000px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"2c321a8f-7f84-43fe-9165-8ea8222ab350\")) {                    Plotly.newPlot(                        \"2c321a8f-7f84-43fe-9165-8ea8222ab350\",                        [{\"domain\":{\"x\":[0.0,0.45],\"y\":[0.0,1.0]},\"labels\":[\"female\",\"male\"],\"showlegend\":true,\"type\":\"pie\",\"values\":[233,109]},{\"domain\":{\"x\":[0.55,1.0],\"y\":[0.0,1.0]},\"labels\":[\"male\",\"female\"],\"showlegend\":true,\"type\":\"pie\",\"values\":[468,81]}],                        {\"annotations\":[{\"font\":{\"size\":16},\"showarrow\":false,\"text\":\"Survived\",\"x\":0.225,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":1.0,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{\"size\":16},\"showarrow\":false,\"text\":\"Non-Survived\",\"x\":0.775,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":1.0,\"yanchor\":\"bottom\",\"yref\":\"paper\"}],\"height\":600,\"legend\":{\"title\":{\"text\":\"Sex\"}},\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"title\":{\"font\":{\"size\":24},\"text\":\"The Distribution of Sex on Survival\",\"x\":0.5,\"xanchor\":\"center\",\"y\":0.95,\"yanchor\":\"top\"},\"width\":1000,\"xaxis\":{\"type\":\"category\"}},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('2c321a8f-7f84-43fe-9165-8ea8222ab350');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "categorical_VIS(data_best_df, \"Sex\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "8c708116",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:35.527850Z",
     "iopub.status.busy": "2021-10-30T12:26:35.527268Z",
     "iopub.status.idle": "2021-10-30T12:26:35.759901Z",
     "shell.execute_reply": "2021-10-30T12:26:35.759436Z",
     "shell.execute_reply.started": "2021-10-30T12:23:55.823786Z"
    },
    "papermill": {
     "duration": 0.314793,
     "end_time": "2021-10-30T12:26:35.760049",
     "exception": false,
     "start_time": "2021-10-30T12:26:35.445256",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      Sex  Survived\n",
      "1    male  0.188908\n",
      "0  female  0.742038\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calcute the survival Rate\n",
    "survival_rate(data_best_df, 'Sex', 'bar')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc0a2401",
   "metadata": {
    "papermill": {
     "duration": 0.077865,
     "end_time": "2021-10-30T12:26:35.917471",
     "exception": false,
     "start_time": "2021-10-30T12:26:35.839606",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "* Female are more likely to survive than male."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f33f415",
   "metadata": {
    "papermill": {
     "duration": 0.077943,
     "end_time": "2021-10-30T12:26:36.073832",
     "exception": false,
     "start_time": "2021-10-30T12:26:35.995889",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"3.3\"></a>\n",
    "## 3.3. What is the distribution of Pclass on survival?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "e65a1096",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:36.235382Z",
     "iopub.status.busy": "2021-10-30T12:26:36.234725Z",
     "iopub.status.idle": "2021-10-30T12:26:36.258478Z",
     "shell.execute_reply": "2021-10-30T12:26:36.258927Z",
     "shell.execute_reply.started": "2021-10-30T12:23:56.170298Z"
    },
    "papermill": {
     "duration": 0.106814,
     "end_time": "2021-10-30T12:26:36.259088",
     "exception": false,
     "start_time": "2021-10-30T12:26:36.152274",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>                            <div id=\"ec4fa767-3c46-4117-b6bb-a07fbf10332f\" class=\"plotly-graph-div\" style=\"height:600px; width:1000px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"ec4fa767-3c46-4117-b6bb-a07fbf10332f\")) {                    Plotly.newPlot(                        \"ec4fa767-3c46-4117-b6bb-a07fbf10332f\",                        [{\"domain\":{\"x\":[0.0,0.45],\"y\":[0.0,1.0]},\"labels\":[1,3,2],\"showlegend\":true,\"type\":\"pie\",\"values\":[136,119,87]},{\"domain\":{\"x\":[0.55,1.0],\"y\":[0.0,1.0]},\"labels\":[3,2,1],\"showlegend\":true,\"type\":\"pie\",\"values\":[372,97,80]}],                        {\"annotations\":[{\"font\":{\"size\":16},\"showarrow\":false,\"text\":\"Survived\",\"x\":0.225,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":1.0,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{\"size\":16},\"showarrow\":false,\"text\":\"Non-Survived\",\"x\":0.775,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":1.0,\"yanchor\":\"bottom\",\"yref\":\"paper\"}],\"height\":600,\"legend\":{\"title\":{\"text\":\"Pclass\"}},\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"title\":{\"font\":{\"size\":24},\"text\":\"The Distribution of Pclass on Survival\",\"x\":0.5,\"xanchor\":\"center\",\"y\":0.95,\"yanchor\":\"top\"},\"width\":1000,\"xaxis\":{\"type\":\"category\"}},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('ec4fa767-3c46-4117-b6bb-a07fbf10332f');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "categorical_VIS(data_best_df, \"Pclass\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "5bf44a5f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:36.423948Z",
     "iopub.status.busy": "2021-10-30T12:26:36.423092Z",
     "iopub.status.idle": "2021-10-30T12:26:36.737266Z",
     "shell.execute_reply": "2021-10-30T12:26:36.736724Z",
     "shell.execute_reply.started": "2021-10-30T12:23:56.205818Z"
    },
    "papermill": {
     "duration": 0.395339,
     "end_time": "2021-10-30T12:26:36.737399",
     "exception": false,
     "start_time": "2021-10-30T12:26:36.342060",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Pclass  Survived\n",
      "2       3  0.242363\n",
      "1       2  0.472826\n",
      "0       1  0.629630\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calcute the survival Rate\n",
    "survival_rate(data_best_df, 'Pclass', 'bar')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae241dc4",
   "metadata": {
    "papermill": {
     "duration": 0.079587,
     "end_time": "2021-10-30T12:26:36.899103",
     "exception": false,
     "start_time": "2021-10-30T12:26:36.819516",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "* The higher the class level is, the more possible the passenger can survive."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f7061810",
   "metadata": {
    "papermill": {
     "duration": 0.079613,
     "end_time": "2021-10-30T12:26:37.059207",
     "exception": false,
     "start_time": "2021-10-30T12:26:36.979594",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"3.4\"></a>\n",
    "## 3.4. What is the distribution of SibSp on survival?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "266be697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:37.222459Z",
     "iopub.status.busy": "2021-10-30T12:26:37.221948Z",
     "iopub.status.idle": "2021-10-30T12:26:37.248001Z",
     "shell.execute_reply": "2021-10-30T12:26:37.248445Z",
     "shell.execute_reply.started": "2021-10-30T12:23:56.583938Z"
    },
    "papermill": {
     "duration": 0.108932,
     "end_time": "2021-10-30T12:26:37.248599",
     "exception": false,
     "start_time": "2021-10-30T12:26:37.139667",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>                            <div id=\"f4dd3139-9d1f-4670-b3b9-c327fd9c02c3\" class=\"plotly-graph-div\" style=\"height:600px; width:1000px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"f4dd3139-9d1f-4670-b3b9-c327fd9c02c3\")) {                    Plotly.newPlot(                        \"f4dd3139-9d1f-4670-b3b9-c327fd9c02c3\",                        [{\"domain\":{\"x\":[0.0,0.45],\"y\":[0.0,1.0]},\"labels\":[0,1,2,3,4],\"showlegend\":true,\"type\":\"pie\",\"values\":[210,112,13,4,3]},{\"domain\":{\"x\":[0.55,1.0],\"y\":[0.0,1.0]},\"labels\":[0,1,2,4,3,8,5],\"showlegend\":true,\"type\":\"pie\",\"values\":[398,97,15,15,12,7,5]}],                        {\"annotations\":[{\"font\":{\"size\":16},\"showarrow\":false,\"text\":\"Survived\",\"x\":0.225,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":1.0,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{\"size\":16},\"showarrow\":false,\"text\":\"Non-Survived\",\"x\":0.775,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":1.0,\"yanchor\":\"bottom\",\"yref\":\"paper\"}],\"height\":600,\"legend\":{\"title\":{\"text\":\"SibSp\"}},\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"title\":{\"font\":{\"size\":24},\"text\":\"The Distribution of SibSp on Survival\",\"x\":0.5,\"xanchor\":\"center\",\"y\":0.95,\"yanchor\":\"top\"},\"width\":1000,\"xaxis\":{\"type\":\"category\"}},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('f4dd3139-9d1f-4670-b3b9-c327fd9c02c3');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "categorical_VIS(data_best_df, \"SibSp\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "e88f9c0f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:37.412625Z",
     "iopub.status.busy": "2021-10-30T12:26:37.412097Z",
     "iopub.status.idle": "2021-10-30T12:26:37.819598Z",
     "shell.execute_reply": "2021-10-30T12:26:37.819178Z",
     "shell.execute_reply.started": "2021-10-30T12:23:56.622770Z"
    },
    "papermill": {
     "duration": 0.49053,
     "end_time": "2021-10-30T12:26:37.819723",
     "exception": false,
     "start_time": "2021-10-30T12:26:37.329193",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   SibSp  Survived\n",
      "5      5  0.000000\n",
      "6      8  0.000000\n",
      "4      4  0.166667\n",
      "3      3  0.250000\n",
      "0      0  0.345395\n",
      "2      2  0.464286\n",
      "1      1  0.535885\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calcute the survival Rate\n",
    "survival_rate(data_best_df, 'SibSp', 'point')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3add20f2",
   "metadata": {
    "papermill": {
     "duration": 0.080501,
     "end_time": "2021-10-30T12:26:37.981510",
     "exception": false,
     "start_time": "2021-10-30T12:26:37.901009",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "People with 1(fewer) sibling seems to have a higer survival rate."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e025fb0",
   "metadata": {
    "papermill": {
     "duration": 0.080696,
     "end_time": "2021-10-30T12:26:38.144709",
     "exception": false,
     "start_time": "2021-10-30T12:26:38.064013",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"3.5\"></a>\n",
    "## 3.5. What is the distribution of Parch on survival?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "47733fb5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:38.315808Z",
     "iopub.status.busy": "2021-10-30T12:26:38.314432Z",
     "iopub.status.idle": "2021-10-30T12:26:38.338643Z",
     "shell.execute_reply": "2021-10-30T12:26:38.338164Z",
     "shell.execute_reply.started": "2021-10-30T12:23:57.153496Z"
    },
    "papermill": {
     "duration": 0.110631,
     "end_time": "2021-10-30T12:26:38.338770",
     "exception": false,
     "start_time": "2021-10-30T12:26:38.228139",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>                            <div id=\"0f62a0b1-203e-4cd8-b969-14bd24cba74a\" class=\"plotly-graph-div\" style=\"height:600px; width:1000px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"0f62a0b1-203e-4cd8-b969-14bd24cba74a\")) {                    Plotly.newPlot(                        \"0f62a0b1-203e-4cd8-b969-14bd24cba74a\",                        [{\"domain\":{\"x\":[0.0,0.45],\"y\":[0.0,1.0]},\"labels\":[0,1,2,3,5],\"showlegend\":true,\"type\":\"pie\",\"values\":[233,65,40,3,1]},{\"domain\":{\"x\":[0.55,1.0],\"y\":[0.0,1.0]},\"labels\":[0,1,2,4,5,3,6],\"showlegend\":true,\"type\":\"pie\",\"values\":[445,53,40,4,4,2,1]}],                        {\"annotations\":[{\"font\":{\"size\":16},\"showarrow\":false,\"text\":\"Survived\",\"x\":0.225,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":1.0,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{\"size\":16},\"showarrow\":false,\"text\":\"Non-Survived\",\"x\":0.775,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":1.0,\"yanchor\":\"bottom\",\"yref\":\"paper\"}],\"height\":600,\"legend\":{\"title\":{\"text\":\"Parch\"}},\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"title\":{\"font\":{\"size\":24},\"text\":\"The Distribution of Parch on Survival\",\"x\":0.5,\"xanchor\":\"center\",\"y\":0.95,\"yanchor\":\"top\"},\"width\":1000,\"xaxis\":{\"type\":\"category\"}},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('0f62a0b1-203e-4cd8-b969-14bd24cba74a');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "categorical_VIS(data_best_df, \"Parch\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "e397826c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:38.505049Z",
     "iopub.status.busy": "2021-10-30T12:26:38.504492Z",
     "iopub.status.idle": "2021-10-30T12:26:38.881693Z",
     "shell.execute_reply": "2021-10-30T12:26:38.881176Z",
     "shell.execute_reply.started": "2021-10-30T12:23:57.190406Z"
    },
    "papermill": {
     "duration": 0.461026,
     "end_time": "2021-10-30T12:26:38.881814",
     "exception": false,
     "start_time": "2021-10-30T12:26:38.420788",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Parch  Survived\n",
      "4      4  0.000000\n",
      "6      6  0.000000\n",
      "5      5  0.200000\n",
      "0      0  0.343658\n",
      "2      2  0.500000\n",
      "1      1  0.550847\n",
      "3      3  0.600000\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calcute the survival Rate\n",
    "survival_rate(data_best_df, 'Parch', 'point')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a3057de",
   "metadata": {
    "papermill": {
     "duration": 0.082446,
     "end_time": "2021-10-30T12:26:39.047173",
     "exception": false,
     "start_time": "2021-10-30T12:26:38.964727",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "It seems people who have fewer parents or children are likely to survive."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74ff7089",
   "metadata": {
    "papermill": {
     "duration": 0.084226,
     "end_time": "2021-10-30T12:26:39.217985",
     "exception": false,
     "start_time": "2021-10-30T12:26:39.133759",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"3.6\"></a>\n",
    "## 3.6. What is the distribution of Embarked on survival?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "102b9013",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:39.392341Z",
     "iopub.status.busy": "2021-10-30T12:26:39.391777Z",
     "iopub.status.idle": "2021-10-30T12:26:39.414623Z",
     "shell.execute_reply": "2021-10-30T12:26:39.415132Z",
     "shell.execute_reply.started": "2021-10-30T12:23:57.683341Z"
    },
    "papermill": {
     "duration": 0.113053,
     "end_time": "2021-10-30T12:26:39.415304",
     "exception": false,
     "start_time": "2021-10-30T12:26:39.302251",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>                            <div id=\"e1565d75-5fb5-4a61-8868-e1eafb535882\" class=\"plotly-graph-div\" style=\"height:600px; width:1000px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"e1565d75-5fb5-4a61-8868-e1eafb535882\")) {                    Plotly.newPlot(                        \"e1565d75-5fb5-4a61-8868-e1eafb535882\",                        [{\"domain\":{\"x\":[0.0,0.45],\"y\":[0.0,1.0]},\"labels\":[\"S\",\"C\",\"Q\"],\"showlegend\":true,\"type\":\"pie\",\"values\":[219,93,30]},{\"domain\":{\"x\":[0.55,1.0],\"y\":[0.0,1.0]},\"labels\":[\"S\",\"C\",\"Q\"],\"showlegend\":true,\"type\":\"pie\",\"values\":[427,75,47]}],                        {\"annotations\":[{\"font\":{\"size\":16},\"showarrow\":false,\"text\":\"Survived\",\"x\":0.225,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":1.0,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{\"size\":16},\"showarrow\":false,\"text\":\"Non-Survived\",\"x\":0.775,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":1.0,\"yanchor\":\"bottom\",\"yref\":\"paper\"}],\"height\":600,\"legend\":{\"title\":{\"text\":\"Embarked\"}},\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"title\":{\"font\":{\"size\":24},\"text\":\"The Distribution of Embarked on Survival\",\"x\":0.5,\"xanchor\":\"center\",\"y\":0.95,\"yanchor\":\"top\"},\"width\":1000,\"xaxis\":{\"type\":\"category\"}},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('e1565d75-5fb5-4a61-8868-e1eafb535882');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "categorical_VIS(data_best_df, \"Embarked\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "ae87ce86",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:39.586540Z",
     "iopub.status.busy": "2021-10-30T12:26:39.585969Z",
     "iopub.status.idle": "2021-10-30T12:26:39.892821Z",
     "shell.execute_reply": "2021-10-30T12:26:39.892315Z",
     "shell.execute_reply.started": "2021-10-30T12:23:57.718187Z"
    },
    "papermill": {
     "duration": 0.394446,
     "end_time": "2021-10-30T12:26:39.892976",
     "exception": false,
     "start_time": "2021-10-30T12:26:39.498530",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Embarked  Survived\n",
      "2        S  0.339009\n",
      "1        Q  0.389610\n",
      "0        C  0.553571\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calcute the survival Rate\n",
    "survival_rate(data_best_df, 'Embarked', 'bar')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c6d36721",
   "metadata": {
    "papermill": {
     "duration": 0.085486,
     "end_time": "2021-10-30T12:26:40.063909",
     "exception": false,
     "start_time": "2021-10-30T12:26:39.978423",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "It seems people who from C(Cherbourg) have a relatively high survival rate."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28907369",
   "metadata": {
    "papermill": {
     "duration": 0.086195,
     "end_time": "2021-10-30T12:26:40.234956",
     "exception": false,
     "start_time": "2021-10-30T12:26:40.148761",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"3.7\"></a>\n",
    "## 3.7. What is the distribution of Age on survival?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "8d9ec66e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:40.410559Z",
     "iopub.status.busy": "2021-10-30T12:26:40.409997Z",
     "iopub.status.idle": "2021-10-30T12:26:40.481985Z",
     "shell.execute_reply": "2021-10-30T12:26:40.481317Z",
     "shell.execute_reply.started": "2021-10-30T12:23:58.098718Z"
    },
    "papermill": {
     "duration": 0.162572,
     "end_time": "2021-10-30T12:26:40.482130",
     "exception": false,
     "start_time": "2021-10-30T12:26:40.319558",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>                            <div id=\"2b62ae72-2303-45e3-be81-6eef9e494da7\" class=\"plotly-graph-div\" style=\"height:600px; width:1000px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"2b62ae72-2303-45e3-be81-6eef9e494da7\")) {                    Plotly.newPlot(                        \"2b62ae72-2303-45e3-be81-6eef9e494da7\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Survived=%{x}<br>Age=%{y}<extra></extra>\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"type\":\"box\",\"x\":[0.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,1.0,1.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,1.0,1.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,1.0,0.0,1.0,1.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,1.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,1.0,1.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,0.0,1.0,1.0,0.0,1.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,0.0,1.0,0.0,1.0,1.0,1.0,0.0,1.0,1.0,1.0,0.0,0.0,0.0,1.0,1.0,0.0,1.0,1.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,1.0,1.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,1.0,1.0,1.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,1.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,1.0,1.0,1.0,1.0,0.0,0.0,1.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,1.0,0.0,1.0,0.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,1.0,1.0,0.0,1.0,1.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,1.0,1.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,1.0,1.0,0.0,1.0,1.0,1.0,0.0,0.0,0.0,1.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,1.0,1.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,1.0,0.0],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[22.0,38.0,26.0,35.0,35.0,25.0,54.0,2.0,27.0,14.0,4.0,58.0,20.0,39.0,14.0,55.0,2.0,29.5,31.0,22.0,35.0,34.0,15.0,28.0,8.0,38.0,25.0,19.0,22.0,25.0,40.0,36.0,22.0,66.0,28.0,42.0,25.0,21.0,18.0,14.0,40.0,27.0,25.0,3.0,19.0,25.0,25.0,22.0,25.0,18.0,7.0,21.0,49.0,29.0,65.0,42.0,21.0,28.5,5.0,11.0,22.0,38.0,45.0,4.0,42.0,25.0,29.0,19.0,17.0,26.0,32.0,16.0,21.0,26.0,32.0,25.0,25.0,25.0,0.83,30.0,22.0,29.0,22.0,28.0,17.0,33.0,16.0,25.0,23.0,24.0,29.0,20.0,46.0,26.0,59.0,25.0,71.0,23.0,34.0,34.0,28.0,25.0,21.0,33.0,37.0,28.0,21.0,25.0,38.0,22.0,47.0,14.5,22.0,20.0,17.0,21.0,70.5,29.0,24.0,2.0,21.0,25.0,32.5,32.5,54.0,12.0,25.0,24.0,22.0,45.0,33.0,20.0,47.0,29.0,25.0,23.0,19.0,37.0,16.0,24.0,22.0,22.0,24.0,19.0,18.0,19.0,27.0,9.0,36.5,42.0,51.0,22.0,55.5,40.5,25.0,51.0,16.0,30.0,25.0,25.0,44.0,40.0,26.0,17.0,1.0,9.0,36.0,45.0,42.0,28.0,61.0,4.0,1.0,21.0,56.0,18.0,25.0,50.0,30.0,36.0,22.0,29.5,9.0,1.0,4.0,42.0,22.0,45.0,40.0,36.0,32.0,19.0,19.0,3.0,44.0,58.0,25.0,42.0,22.0,24.0,28.0,25.0,34.0,45.5,18.0,2.0,32.0,26.0,16.0,40.0,24.0,35.0,22.0,30.0,25.0,31.0,27.0,42.0,32.0,30.0,16.0,27.0,51.0,25.0,38.0,22.0,19.0,20.5,18.0,22.0,35.0,29.0,59.0,5.0,24.0,22.0,44.0,8.0,19.0,33.0,22.0,22.0,29.0,22.0,30.0,44.0,25.0,24.0,37.0,54.0,25.0,29.0,62.0,30.0,41.0,29.0,36.0,30.0,35.0,50.0,25.0,3.0,52.0,40.0,22.0,36.0,16.0,25.0,58.0,35.0,42.0,25.0,41.0,37.0,22.0,63.0,45.0,29.5,7.0,35.0,65.0,28.0,16.0,19.0,42.0,33.0,30.0,22.0,42.0,22.0,26.0,19.0,36.0,24.0,24.0,42.0,23.5,2.0,42.0,50.0,22.0,25.0,19.0,28.0,25.0,0.92,36.0,17.0,30.0,30.0,24.0,18.0,26.0,28.0,43.0,26.0,24.0,54.0,31.0,40.0,22.0,27.0,30.0,22.0,25.0,36.0,61.0,36.0,31.0,16.0,22.0,45.5,38.0,16.0,36.0,25.0,29.0,41.0,45.0,45.0,2.0,24.0,28.0,25.0,36.0,24.0,40.0,22.0,3.0,42.0,23.0,42.0,15.0,25.0,25.0,28.0,22.0,38.0,22.0,22.0,40.0,29.0,45.0,35.0,25.0,30.0,60.0,22.0,22.0,24.0,25.0,18.0,19.0,22.0,3.0,36.0,22.0,27.0,20.0,19.0,42.0,1.0,32.0,35.0,25.0,18.0,1.0,36.0,25.0,17.0,36.0,21.0,28.0,23.0,24.0,22.0,31.0,46.0,23.0,28.0,39.0,26.0,21.0,28.0,20.0,34.0,51.0,3.0,21.0,22.0,25.0,25.0,33.0,29.5,44.0,22.0,34.0,18.0,30.0,10.0,25.0,21.0,29.0,28.0,18.0,25.0,28.0,19.0,25.0,32.0,28.0,22.0,42.0,17.0,50.0,14.0,21.0,24.0,64.0,31.0,45.0,20.0,25.0,28.0,25.0,4.0,13.0,34.0,5.0,52.0,36.0,25.0,30.0,49.0,25.0,29.0,65.0,36.0,50.0,25.0,48.0,34.0,47.0,48.0,25.0,38.0,29.5,56.0,25.0,0.75,25.0,38.0,33.0,23.0,22.0,42.0,34.0,29.0,22.0,2.0,9.0,29.5,50.0,63.0,25.0,22.0,35.0,58.0,30.0,9.0,25.0,21.0,55.0,71.0,21.0,25.0,54.0,25.0,25.0,24.0,17.0,21.0,22.0,37.0,16.0,18.0,33.0,42.0,28.0,26.0,29.0,25.0,36.0,54.0,24.0,47.0,34.0,25.0,36.0,32.0,30.0,22.0,25.0,44.0,25.0,40.5,50.0,42.0,39.0,23.0,2.0,25.0,17.0,22.0,30.0,7.0,45.0,30.0,25.0,22.0,36.0,9.0,11.0,32.0,50.0,64.0,19.0,29.5,33.0,8.0,17.0,27.0,25.0,22.0,22.0,62.0,48.0,42.0,39.0,36.0,25.0,40.0,28.0,25.0,22.0,24.0,19.0,29.0,25.0,32.0,62.0,53.0,36.0,22.0,16.0,19.0,34.0,39.0,22.0,32.0,25.0,39.0,54.0,36.0,25.0,18.0,47.0,60.0,22.0,25.0,35.0,52.0,47.0,22.0,37.0,36.0,28.0,49.0,25.0,49.0,24.0,25.0,42.0,44.0,35.0,36.0,30.0,27.0,22.0,40.0,39.0,25.0,22.0,25.0,35.0,24.0,34.0,26.0,4.0,26.0,27.0,42.0,20.0,21.0,21.0,61.0,57.0,21.0,26.0,25.0,80.0,51.0,32.0,42.0,9.0,28.0,32.0,31.0,41.0,25.0,20.0,24.0,2.0,25.0,0.75,48.0,19.0,56.0,25.0,23.0,25.0,18.0,21.0,22.0,18.0,24.0,25.0,32.0,23.0,58.0,50.0,40.0,47.0,36.0,20.0,32.0,25.0,25.0,43.0,36.0,40.0,31.0,70.0,31.0,29.5,18.0,24.5,18.0,43.0,36.0,22.0,27.0,20.0,14.0,60.0,25.0,14.0,19.0,18.0,15.0,31.0,4.0,25.0,25.0,60.0,52.0,44.0,22.0,49.0,42.0,18.0,35.0,18.0,25.0,26.0,39.0,45.0,42.0,22.0,25.0,24.0,42.0,48.0,29.0,52.0,19.0,38.0,27.0,25.0,33.0,6.0,17.0,34.0,50.0,27.0,20.0,30.0,22.0,25.0,25.0,29.0,11.0,29.5,23.0,23.0,28.5,48.0,35.0,25.0,25.0,42.0,36.0,21.0,24.0,31.0,70.0,16.0,30.0,19.0,31.0,4.0,6.0,33.0,23.0,48.0,0.67,28.0,18.0,34.0,33.0,25.0,41.0,20.0,36.0,16.0,51.0,42.0,30.5,25.0,32.0,24.0,48.0,57.0,25.0,54.0,18.0,25.0,5.0,25.0,43.0,13.0,17.0,29.0,25.0,25.0,25.0,18.0,8.0,1.0,46.0,25.0,16.0,22.0,42.0,25.0,39.0,49.0,31.0,30.0,30.0,34.0,31.0,11.0,0.42,27.0,31.0,39.0,18.0,39.0,33.0,26.0,39.0,35.0,6.0,30.5,42.0,23.0,31.0,43.0,10.0,52.0,27.0,38.0,27.0,2.0,25.0,25.0,1.0,25.0,62.0,15.0,0.83,25.0,23.0,18.0,39.0,21.0,25.0,32.0,42.0,20.0,16.0,30.0,34.5,17.0,42.0,25.0,35.0,28.0,36.0,4.0,74.0,9.0,16.0,44.0,18.0,45.0,51.0,24.0,25.0,41.0,21.0,48.0,22.0,24.0,42.0,27.0,31.0,25.0,4.0,26.0,47.0,33.0,47.0,28.0,15.0,20.0,19.0,25.0,56.0,25.0,33.0,22.0,28.0,25.0,39.0,27.0,19.0,22.0,26.0,32.0],\"y0\":\" \",\"yaxis\":\"y\"}],                        {\"boxmode\":\"group\",\"height\":600,\"legend\":{\"title\":{\"text\":\"Survived\"},\"tracegroupgap\":0},\"margin\":{\"t\":60},\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"title\":{\"font\":{\"size\":24},\"text\":\"The Distribution of Age on Survival\",\"x\":0.5,\"xanchor\":\"center\",\"y\":0.95,\"yanchor\":\"top\"},\"width\":1000,\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Survived\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Age\"}}},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('2b62ae72-2303-45e3-be81-6eef9e494da7');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "age_fig = px.box(data_best_df, x=\"Survived\", y=\"Age\")\n",
    "age_fig.update_layout(\n",
    "                  height=600, \n",
    "                  width=1000,\n",
    "                  title={\n",
    "                  'text': \"The Distribution of Age on Survival\",\n",
    "                  'font': {'size': 24},\n",
    "                  'y':0.95,\n",
    "                  'x':0.5,\n",
    "                  'xanchor': 'center',\n",
    "                  'yanchor': 'top'},\n",
    "                  legend_title_text=\"Survived\"\n",
    "                 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "2ecf6c33",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:40.655138Z",
     "iopub.status.busy": "2021-10-30T12:26:40.654550Z",
     "iopub.status.idle": "2021-10-30T12:26:41.012797Z",
     "shell.execute_reply": "2021-10-30T12:26:41.013288Z",
     "shell.execute_reply.started": "2021-10-30T12:23:58.199973Z"
    },
    "papermill": {
     "duration": 0.446615,
     "end_time": "2021-10-30T12:26:41.013448",
     "exception": false,
     "start_time": "2021-10-30T12:26:40.566833",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  AgeBin  Survived\n",
      "4      e  0.090909\n",
      "1      b  0.337374\n",
      "2      c  0.412037\n",
      "3      d  0.434783\n",
      "0      a  0.550000\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calcute the survival Rate\n",
    "survival_rate(data_best_df, 'AgeBin', 'point')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3ad8c2b",
   "metadata": {
    "papermill": {
     "duration": 0.086304,
     "end_time": "2021-10-30T12:26:41.186090",
     "exception": false,
     "start_time": "2021-10-30T12:26:41.099786",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"3.8\"></a>\n",
    "## 3.8. What is the distribution of Fare on survival?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "93b4d011",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:41.363985Z",
     "iopub.status.busy": "2021-10-30T12:26:41.363026Z",
     "iopub.status.idle": "2021-10-30T12:26:41.420102Z",
     "shell.execute_reply": "2021-10-30T12:26:41.420569Z",
     "shell.execute_reply.started": "2021-10-30T12:23:58.658480Z"
    },
    "papermill": {
     "duration": 0.147479,
     "end_time": "2021-10-30T12:26:41.420743",
     "exception": false,
     "start_time": "2021-10-30T12:26:41.273264",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>                            <div id=\"488ac7ce-b912-4ab9-9e49-4e5a031bbe1d\" class=\"plotly-graph-div\" style=\"height:600px; width:1000px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"488ac7ce-b912-4ab9-9e49-4e5a031bbe1d\")) {                    Plotly.newPlot(                        \"488ac7ce-b912-4ab9-9e49-4e5a031bbe1d\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Survived=%{x}<br>Fare=%{y}<extra></extra>\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"type\":\"box\",\"x\":[0.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,1.0,1.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,1.0,1.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,1.0,0.0,1.0,1.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,1.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,1.0,1.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,0.0,1.0,1.0,0.0,1.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,0.0,1.0,0.0,1.0,1.0,1.0,0.0,1.0,1.0,1.0,0.0,0.0,0.0,1.0,1.0,0.0,1.0,1.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,1.0,1.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,1.0,1.0,1.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,1.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,1.0,1.0,1.0,1.0,0.0,0.0,1.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,1.0,0.0,1.0,0.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,1.0,1.0,0.0,1.0,1.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,1.0,1.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,1.0,1.0,0.0,1.0,1.0,1.0,0.0,0.0,0.0,1.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,1.0,1.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,1.0,0.0],\"x0\":\" \",\"xaxis\":\"x\",\"y\":[7.25,71.2833,7.925,53.1,8.05,8.4583,51.8625,21.075,11.1333,30.0708,16.7,26.55,8.05,31.275,7.8542,16.0,29.125,13.0,18.0,7.225,26.0,13.0,8.0292,35.5,21.075,31.3875,7.225,263.0,7.8792,7.8958,27.7208,146.5208,7.75,10.5,82.1708,52.0,7.2292,8.05,18.0,11.2417,9.475,21.0,7.8958,41.5792,7.8792,8.05,15.5,7.75,21.6792,17.8,39.6875,7.8,76.7292,26.0,61.9792,35.5,10.5,7.2292,27.75,46.9,7.2292,80.0,83.475,27.9,27.7208,15.2458,10.5,8.1583,7.925,8.6625,10.5,46.9,73.5,14.4542,56.4958,7.65,7.8958,8.05,29.0,12.475,9.0,9.5,7.7875,47.1,10.5,15.85,34.375,8.05,263.0,8.05,8.05,7.8542,61.175,20.575,7.25,8.05,34.6542,63.3583,23.0,26.0,7.8958,7.8958,77.2875,8.6542,7.925,7.8958,7.65,7.775,7.8958,24.15,52.0,14.4542,8.05,9.825,14.4583,7.925,7.75,21.0,247.5208,31.275,73.5,8.05,30.0708,13.0,77.2875,11.2417,7.75,7.1417,22.3583,6.975,7.8958,7.05,14.5,26.0,13.0,15.0458,26.2833,53.1,9.2167,79.2,15.2458,7.75,15.85,6.75,11.5,36.75,7.7958,34.375,26.0,13.0,12.525,66.6,8.05,14.5,7.3125,61.3792,7.7333,8.05,8.6625,69.55,16.1,15.75,7.775,8.6625,39.6875,20.525,55.0,27.9,25.925,56.4958,33.5,29.125,11.1333,7.925,30.6958,7.8542,25.4667,28.7125,13.0,0.0,69.55,15.05,31.3875,39.0,22.025,50.0,15.5,26.55,15.5,7.8958,13.0,13.0,7.8542,26.0,27.7208,146.5208,7.75,8.4042,7.75,13.0,9.5,69.55,6.4958,7.225,8.05,10.4625,15.85,18.7875,7.75,31.0,7.05,21.0,7.25,13.0,7.75,113.275,7.925,27.0,76.2917,10.5,8.05,13.0,8.05,7.8958,90.0,9.35,10.5,7.25,13.0,25.4667,83.475,7.775,13.5,31.3875,10.5,7.55,26.0,26.25,10.5,12.275,14.4542,15.5,10.5,7.125,7.225,90.0,7.775,14.5,52.5542,26.0,7.25,10.4625,26.55,16.1,20.2125,15.2458,79.2,86.5,512.3292,26.0,7.75,31.3875,79.65,0.0,7.75,10.5,39.6875,7.775,153.4625,135.6333,31.0,0.0,19.5,29.7,7.75,77.9583,7.75,0.0,29.125,20.25,7.75,7.8542,9.5,8.05,26.0,8.6625,9.5,7.8958,13.0,7.75,78.85,91.0792,12.875,8.85,7.8958,27.7208,7.2292,151.55,30.5,247.5208,7.75,23.25,0.0,12.35,8.05,151.55,110.8833,108.9,24.0,56.9292,83.1583,262.375,26.0,7.8958,26.25,7.8542,26.0,14.0,164.8667,134.5,7.25,7.8958,12.35,29.0,69.55,135.6333,6.2375,13.0,20.525,57.9792,23.25,28.5,153.4625,18.0,133.65,7.8958,66.6,134.5,8.05,35.5,26.0,263.0,13.0,13.0,13.0,13.0,13.0,16.1,15.9,8.6625,9.225,35.0,7.2292,17.8,7.225,9.5,55.0,13.0,7.8792,7.8792,27.9,27.7208,14.4542,7.05,15.5,7.25,75.25,7.2292,7.75,69.3,55.4417,6.4958,8.05,135.6333,21.075,82.1708,7.25,211.5,4.0125,7.775,227.525,15.7417,7.925,52.0,7.8958,73.5,46.9,13.0,7.7292,12.0,120.0,7.7958,7.925,113.275,16.7,7.7958,7.8542,26.0,10.5,12.65,7.925,8.05,9.825,15.85,8.6625,21.0,7.75,18.75,7.775,25.4667,7.8958,6.8583,90.0,0.0,7.925,8.05,32.5,13.0,13.0,24.15,7.8958,7.7333,7.875,14.4,20.2125,7.25,26.0,26.0,7.75,8.05,26.55,16.1,26.0,7.125,55.9,120.0,34.375,18.75,263.0,10.5,26.25,9.5,7.775,13.0,8.1125,81.8583,19.5,26.55,19.2583,30.5,27.75,19.9667,27.75,89.1042,8.05,7.8958,26.55,51.8625,10.5,7.75,26.55,8.05,38.5,13.0,8.05,7.05,0.0,26.55,7.725,19.2583,7.25,8.6625,27.75,13.7917,9.8375,52.0,21.0,7.0458,7.5208,12.2875,46.9,0.0,8.05,9.5875,91.0792,25.4667,90.0,29.7,8.05,15.9,19.9667,7.25,30.5,49.5042,8.05,14.4583,78.2667,15.1,151.55,7.7958,8.6625,7.75,7.6292,9.5875,86.5,108.9,26.0,26.55,22.525,56.4958,7.75,8.05,26.2875,59.4,7.4958,34.0208,10.5,24.15,26.0,7.8958,93.5,7.8958,7.225,57.9792,7.2292,7.75,10.5,221.7792,7.925,11.5,26.0,7.2292,7.2292,22.3583,8.6625,26.25,26.55,106.425,14.5,49.5,71.0,31.275,31.275,26.0,106.425,26.0,26.0,13.8625,20.525,36.75,110.8833,26.0,7.8292,7.225,7.775,26.55,39.6,227.525,79.65,17.4,7.75,7.8958,13.5,8.05,8.05,24.15,7.8958,21.075,7.2292,7.8542,10.5,51.4792,26.3875,7.75,8.05,14.5,13.0,55.9,14.4583,7.925,30.0,110.8833,26.0,40.125,8.7125,79.65,15.0,79.2,8.05,8.05,7.125,78.2667,7.25,7.75,26.0,24.15,33.0,0.0,7.225,56.9292,27.0,7.8958,42.4,8.05,26.55,15.55,7.8958,30.5,41.5792,153.4625,31.275,7.05,15.5,7.75,8.05,65.0,14.4,16.1,39.0,10.5,14.4542,52.5542,15.7417,7.8542,16.1,32.3208,12.35,77.9583,7.8958,7.7333,30.0,7.0542,30.5,0.0,27.9,13.0,7.925,26.25,39.6875,16.1,7.8542,69.3,27.9,56.4958,19.2583,76.7292,7.8958,35.5,7.55,7.55,7.8958,23.0,8.4333,7.8292,6.75,73.5,7.8958,15.5,13.0,113.275,133.65,7.225,25.5875,7.4958,7.925,73.5,13.0,7.775,8.05,52.0,39.0,52.0,10.5,13.0,0.0,7.775,8.05,9.8417,46.9,512.3292,8.1375,76.7292,9.225,46.9,39.0,41.5792,39.6875,10.1708,7.7958,211.3375,57.0,13.4167,56.4958,7.225,26.55,13.5,8.05,7.7333,110.8833,7.65,227.525,26.2875,14.4542,7.7417,7.8542,26.0,13.5,26.2875,151.55,15.2458,49.5042,26.55,52.0,9.4833,13.0,7.65,227.525,10.5,15.5,7.775,33.0,7.0542,13.0,13.0,53.1,8.6625,21.0,7.7375,26.0,7.925,211.3375,18.7875,0.0,13.0,13.0,16.1,34.375,512.3292,7.8958,7.8958,30.0,78.85,262.375,16.1,7.925,71.0,20.25,13.0,53.1,7.75,23.0,12.475,9.5,7.8958,65.0,14.5,7.7958,11.5,8.05,86.5,14.5,7.125,7.2292,120.0,7.775,77.9583,39.6,7.75,24.15,8.3625,9.5,7.8542,10.5,7.225,23.0,7.75,7.75,12.475,7.7375,211.3375,7.2292,57.0,30.0,23.45,7.05,7.25,7.4958,29.125,20.575,79.2,7.75,26.0,69.55,30.6958,7.8958,13.0,25.9292,8.6833,7.2292,24.15,13.0,26.25,120.0,8.5167,6.975,7.775,0.0,7.775,13.0,53.1,7.8875,24.15,10.5,31.275,8.05,0.0,7.925,37.0042,6.45,27.9,93.5,8.6625,0.0,12.475,39.6875,6.95,56.4958,37.0042,7.75,80.0,14.4542,18.75,7.2292,7.8542,8.3,83.1583,8.6625,8.05,56.4958,29.7,7.925,10.5,31.0,6.4375,8.6625,7.55,69.55,7.8958,33.0,89.1042,31.275,7.775,15.2458,39.4,26.0,9.35,164.8667,26.55,19.2583,7.2292,14.1083,11.5,25.9292,69.55,13.0,13.0,13.8583,50.4958,9.5,11.1333,7.8958,52.5542,5.0,9.0,24.0,7.225,9.8458,7.8958,7.8958,83.1583,26.0,7.8958,10.5167,10.5,7.05,29.125,13.0,30.0,23.45,30.0,7.75],\"y0\":\" \",\"yaxis\":\"y\"}],                        {\"boxmode\":\"group\",\"height\":600,\"legend\":{\"title\":{\"text\":\"Survived\"},\"tracegroupgap\":0},\"margin\":{\"t\":60},\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"title\":{\"font\":{\"size\":24},\"text\":\"The Distribution of Fare on Survival\",\"x\":0.5,\"xanchor\":\"center\",\"y\":0.95,\"yanchor\":\"top\"},\"width\":1000,\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Survived\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Fare\"}}},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('488ac7ce-b912-4ab9-9e49-4e5a031bbe1d');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fare_fig = px.box(data_best_df, x=\"Survived\", y=\"Fare\")\n",
    "fare_fig.update_layout(\n",
    "                  height=600, \n",
    "                  width=1000,\n",
    "                  title={\n",
    "                  'text': \"The Distribution of Fare on Survival\",\n",
    "                  'font': {'size': 24},\n",
    "                  'y':0.95,\n",
    "                  'x':0.5,\n",
    "                  'xanchor': 'center',\n",
    "                  'yanchor': 'top'},\n",
    "                  legend_title_text=\"Survived\"\n",
    "                 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "5c040df6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:41.597914Z",
     "iopub.status.busy": "2021-10-30T12:26:41.597395Z",
     "iopub.status.idle": "2021-10-30T12:26:41.966261Z",
     "shell.execute_reply": "2021-10-30T12:26:41.966647Z",
     "shell.execute_reply.started": "2021-10-30T12:23:58.738884Z"
    },
    "papermill": {
     "duration": 0.45848,
     "end_time": "2021-10-30T12:26:41.966807",
     "exception": false,
     "start_time": "2021-10-30T12:26:41.508327",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  FareBin  Survived\n",
      "0       a  0.368113\n",
      "2       c  0.666667\n",
      "1       b  0.724138\n",
      "3       d  1.000000\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calcute the survival Rate\n",
    "survival_rate(data_best_df, 'FareBin', 'point')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28a3e096",
   "metadata": {
    "papermill": {
     "duration": 0.087782,
     "end_time": "2021-10-30T12:26:42.143769",
     "exception": false,
     "start_time": "2021-10-30T12:26:42.055987",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "* The more expensive the ticket is, the more possible the passenger can survive."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7371f204",
   "metadata": {
    "papermill": {
     "duration": 0.090136,
     "end_time": "2021-10-30T12:26:42.323673",
     "exception": false,
     "start_time": "2021-10-30T12:26:42.233537",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"4\"></a>\n",
    "# 4. Feature Engineering"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83c5e8dc",
   "metadata": {
    "papermill": {
     "duration": 0.087372,
     "end_time": "2021-10-30T12:26:42.499286",
     "exception": false,
     "start_time": "2021-10-30T12:26:42.411914",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"4.1\"></a>\n",
    "## 4.1. Create new features"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d888f6c",
   "metadata": {
    "papermill": {
     "duration": 0.087424,
     "end_time": "2021-10-30T12:26:42.674964",
     "exception": false,
     "start_time": "2021-10-30T12:26:42.587540",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"4.1.1\"></a>\n",
    "### Family Size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "efaf9e0d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:42.857126Z",
     "iopub.status.busy": "2021-10-30T12:26:42.856519Z",
     "iopub.status.idle": "2021-10-30T12:26:43.318593Z",
     "shell.execute_reply": "2021-10-30T12:26:43.319134Z",
     "shell.execute_reply.started": "2021-10-30T12:23:59.159220Z"
    },
    "papermill": {
     "duration": 0.556475,
     "end_time": "2021-10-30T12:26:43.319317",
     "exception": false,
     "start_time": "2021-10-30T12:26:42.762842",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Family_size  Survived\n",
      "7            8  0.000000\n",
      "8           11  0.000000\n",
      "5            6  0.136364\n",
      "4            5  0.200000\n",
      "0            1  0.303538\n",
      "6            7  0.333333\n",
      "1            2  0.552795\n",
      "2            3  0.578431\n",
      "3            4  0.724138\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Combine the SibSp and Parch to Family Size\n",
    "data_best_df['Family_size'] = data_best_df['SibSp'] + data_best_df['Parch'] + 1\n",
    "survival_rate(data_best_df, 'Family_size', 'point')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "3e7f8e29",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:43.510429Z",
     "iopub.status.busy": "2021-10-30T12:26:43.509840Z",
     "iopub.status.idle": "2021-10-30T12:26:43.512197Z",
     "shell.execute_reply": "2021-10-30T12:26:43.512635Z",
     "shell.execute_reply.started": "2021-10-30T12:23:59.757705Z"
    },
    "papermill": {
     "duration": 0.102103,
     "end_time": "2021-10-30T12:26:43.512808",
     "exception": false,
     "start_time": "2021-10-30T12:26:43.410705",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Binning the family_size\n",
    "data_best_df.loc[data_best_df['Family_size'] == 1, 'Family_size'] = 0 # Alone\n",
    "data_best_df.loc[(data_best_df['Family_size'] > 1) & (data_best_df['Family_size'] <= 4), 'Family_size'] = 1  # Small Family \n",
    "data_best_df.loc[(data_best_df['Family_size'] > 4) & (data_best_df['Family_size'] <= 6), 'Family_size'] = 2  # Medium Family\n",
    "data_best_df.loc[data_best_df['Family_size']  > 6, 'Family_size'] = 3 # Large Family"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "bd432c1d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:43.700240Z",
     "iopub.status.busy": "2021-10-30T12:26:43.699606Z",
     "iopub.status.idle": "2021-10-30T12:26:43.703895Z",
     "shell.execute_reply": "2021-10-30T12:26:43.704341Z",
     "shell.execute_reply.started": "2021-10-30T12:23:59.772212Z"
    },
    "papermill": {
     "duration": 0.098672,
     "end_time": "2021-10-30T12:26:43.704497",
     "exception": false,
     "start_time": "2021-10-30T12:26:43.605825",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Feature SibSp and Parch are replaced by Family_size\n",
    "data_best_df.drop(['SibSp', 'Parch'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "7ec6f714",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:43.886592Z",
     "iopub.status.busy": "2021-10-30T12:26:43.886058Z",
     "iopub.status.idle": "2021-10-30T12:26:43.890568Z",
     "shell.execute_reply": "2021-10-30T12:26:43.891100Z",
     "shell.execute_reply.started": "2021-10-30T12:23:59.783079Z"
    },
    "papermill": {
     "duration": 0.096364,
     "end_time": "2021-10-30T12:26:43.891256",
     "exception": false,
     "start_time": "2021-10-30T12:26:43.794892",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Feature Age and Fare are replaced by AgeBin and FareBin\n",
    "data_best_df.drop(['Age', 'Fare'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b31bd054",
   "metadata": {
    "papermill": {
     "duration": 0.089176,
     "end_time": "2021-10-30T12:26:44.069806",
     "exception": false,
     "start_time": "2021-10-30T12:26:43.980630",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"4.2\"></a>\n",
    "## 4.2. One-Hot Encoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "8d07c5f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:44.255016Z",
     "iopub.status.busy": "2021-10-30T12:26:44.254434Z",
     "iopub.status.idle": "2021-10-30T12:26:44.266870Z",
     "shell.execute_reply": "2021-10-30T12:26:44.267333Z",
     "shell.execute_reply.started": "2021-10-30T12:23:59.798285Z"
    },
    "papermill": {
     "duration": 0.107198,
     "end_time": "2021-10-30T12:26:44.267496",
     "exception": false,
     "start_time": "2021-10-30T12:26:44.160298",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Select features that are suitable for One Hot Encoding\n",
    "onehot_features = [\"Embarked\",\"title\"]\n",
    "onehot_df = pd.get_dummies(data_best_df[onehot_features])\n",
    "data_best_df.drop(onehot_features, axis=1, inplace=True)\n",
    "data_best_df = pd.concat([data_best_df, onehot_df], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "efc326fb",
   "metadata": {
    "papermill": {
     "duration": 0.088985,
     "end_time": "2021-10-30T12:26:44.447089",
     "exception": false,
     "start_time": "2021-10-30T12:26:44.358104",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"4.3\"></a>\n",
    "## 4.3. Label Encoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "e6aab980",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:44.633195Z",
     "iopub.status.busy": "2021-10-30T12:26:44.632503Z",
     "iopub.status.idle": "2021-10-30T12:26:44.635285Z",
     "shell.execute_reply": "2021-10-30T12:26:44.634820Z",
     "shell.execute_reply.started": "2021-10-30T12:23:59.826292Z"
    },
    "papermill": {
     "duration": 0.099929,
     "end_time": "2021-10-30T12:26:44.635416",
     "exception": false,
     "start_time": "2021-10-30T12:26:44.535487",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Select features that are suitable for Label Encoding\n",
    "data_best_df[\"Sex\"]  = LabelEncoder().fit_transform(data_best_df[\"Sex\"])\n",
    "data_best_df[\"AgeBin\"]  = LabelEncoder().fit_transform(data_best_df[\"AgeBin\"])\n",
    "data_best_df[\"FareBin\"]  = LabelEncoder().fit_transform(data_best_df[\"FareBin\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "20625dff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:44.822542Z",
     "iopub.status.busy": "2021-10-30T12:26:44.821975Z",
     "iopub.status.idle": "2021-10-30T12:26:44.836496Z",
     "shell.execute_reply": "2021-10-30T12:26:44.837022Z",
     "shell.execute_reply.started": "2021-10-30T12:23:59.838938Z"
    },
    "papermill": {
     "duration": 0.111217,
     "end_time": "2021-10-30T12:26:44.837178",
     "exception": false,
     "start_time": "2021-10-30T12:26:44.725961",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Cabin_indicator</th>\n",
       "      <th>AgeBin</th>\n",
       "      <th>FareBin</th>\n",
       "      <th>Family_size</th>\n",
       "      <th>Embarked_C</th>\n",
       "      <th>Embarked_Q</th>\n",
       "      <th>Embarked_S</th>\n",
       "      <th>title_Master</th>\n",
       "      <th>title_Miss</th>\n",
       "      <th>title_Mr</th>\n",
       "      <th>title_Mrs</th>\n",
       "      <th>title_Other</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Survived  Pclass  Sex  Cabin_indicator  AgeBin  FareBin  Family_size  \\\n",
       "0         0.0       3    1                0       1        0            1   \n",
       "1         1.0       1    0                1       2        0            1   \n",
       "2         1.0       3    0                0       1        0            0   \n",
       "3         1.0       1    0                1       2        0            1   \n",
       "4         0.0       3    1                0       2        0            0   \n",
       "..        ...     ...  ...              ...     ...      ...          ...   \n",
       "886       0.0       2    1                0       1        0            0   \n",
       "887       1.0       1    0                1       1        0            0   \n",
       "888       0.0       3    0                0       1        0            1   \n",
       "889       1.0       1    1                1       1        0            0   \n",
       "890       0.0       3    1                0       1        0            0   \n",
       "\n",
       "     Embarked_C  Embarked_Q  Embarked_S  title_Master  title_Miss  title_Mr  \\\n",
       "0             0           0           1             0           0         1   \n",
       "1             1           0           0             0           0         0   \n",
       "2             0           0           1             0           1         0   \n",
       "3             0           0           1             0           0         0   \n",
       "4             0           0           1             0           0         1   \n",
       "..          ...         ...         ...           ...         ...       ...   \n",
       "886           0           0           1             0           0         0   \n",
       "887           0           0           1             0           1         0   \n",
       "888           0           0           1             0           1         0   \n",
       "889           1           0           0             0           0         1   \n",
       "890           0           1           0             0           0         1   \n",
       "\n",
       "     title_Mrs  title_Other  \n",
       "0            0            0  \n",
       "1            1            0  \n",
       "2            0            0  \n",
       "3            1            0  \n",
       "4            0            0  \n",
       "..         ...          ...  \n",
       "886          0            1  \n",
       "887          0            0  \n",
       "888          0            0  \n",
       "889          0            0  \n",
       "890          0            0  \n",
       "\n",
       "[891 rows x 15 columns]"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_best_df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0c453e2",
   "metadata": {
    "papermill": {
     "duration": 0.089015,
     "end_time": "2021-10-30T12:26:45.015277",
     "exception": false,
     "start_time": "2021-10-30T12:26:44.926262",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"5\"></a>\n",
    "# 5. Modelling"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa8d8fc1",
   "metadata": {
    "papermill": {
     "duration": 0.091232,
     "end_time": "2021-10-30T12:26:45.198739",
     "exception": false,
     "start_time": "2021-10-30T12:26:45.107507",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"5.1\"></a>\n",
    "## 5.1. Train Test Split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "dd0f568d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:45.387340Z",
     "iopub.status.busy": "2021-10-30T12:26:45.386220Z",
     "iopub.status.idle": "2021-10-30T12:26:45.391636Z",
     "shell.execute_reply": "2021-10-30T12:26:45.392127Z",
     "shell.execute_reply.started": "2021-10-30T12:23:59.869506Z"
    },
    "papermill": {
     "duration": 0.1022,
     "end_time": "2021-10-30T12:26:45.392294",
     "exception": false,
     "start_time": "2021-10-30T12:26:45.290094",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Train/Test Split\n",
    "X = data_best_df.drop([\"Survived\"], axis=1)\n",
    "Y = data_best_df.Survived.astype('int8')\n",
    "x_train, x_test, y_train, y_test = train_test_split(X, Y,test_size = 0.25, random_state=0, stratify=Y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6fb2990a",
   "metadata": {
    "papermill": {
     "duration": 0.088708,
     "end_time": "2021-10-30T12:26:45.570009",
     "exception": false,
     "start_time": "2021-10-30T12:26:45.481301",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"5.2\"></a>\n",
    "## 5.2. Train and Validation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a7902be9",
   "metadata": {
    "papermill": {
     "duration": 0.088641,
     "end_time": "2021-10-30T12:26:45.749152",
     "exception": false,
     "start_time": "2021-10-30T12:26:45.660511",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"5.2.1\"></a>\n",
    "### 5.2.1 Logistic regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "423fad8e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:45.930225Z",
     "iopub.status.busy": "2021-10-30T12:26:45.929656Z",
     "iopub.status.idle": "2021-10-30T12:26:46.053497Z",
     "shell.execute_reply": "2021-10-30T12:26:46.054132Z",
     "shell.execute_reply.started": "2021-10-30T12:23:59.889294Z"
    },
    "papermill": {
     "duration": 0.215971,
     "end_time": "2021-10-30T12:26:46.054374",
     "exception": false,
     "start_time": "2021-10-30T12:26:45.838403",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.83      0.91      0.86       137\n",
      "           1       0.82      0.70      0.75        86\n",
      "\n",
      "    accuracy                           0.83       223\n",
      "   macro avg       0.82      0.80      0.81       223\n",
      "weighted avg       0.82      0.83      0.82       223\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Logistic regression\n",
    "# https://stackoverflow.com/questions/65682019/attributeerror-str-object-has-no-attribute-decode-in-fitting-logistic-regre\n",
    "lr = LogisticRegression(penalty = 'l2',solver = 'liblinear')\n",
    "lr.fit(x_train, y_train)\n",
    "predictions = lr.predict(x_test)\n",
    "print(classification_report(y_test, predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "c79d4fd2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:46.262691Z",
     "iopub.status.busy": "2021-10-30T12:26:46.262140Z",
     "iopub.status.idle": "2021-10-30T12:26:46.297636Z",
     "shell.execute_reply": "2021-10-30T12:26:46.298140Z",
     "shell.execute_reply.started": "2021-10-30T12:24:00.045259Z"
    },
    "papermill": {
     "duration": 0.132224,
     "end_time": "2021-10-30T12:26:46.298295",
     "exception": false,
     "start_time": "2021-10-30T12:26:46.166071",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8394618834080717"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Cross Validation\n",
    "lr_cv = StratifiedShuffleSplit(n_splits=5, test_size=.25, random_state=0)\n",
    "lr_cv_avg = cross_val_score(lr, X, Y, cv=lr_cv, scoring=\"accuracy\").mean()\n",
    "lr_cv_avg"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5cedb633",
   "metadata": {
    "papermill": {
     "duration": 0.090007,
     "end_time": "2021-10-30T12:26:46.478244",
     "exception": false,
     "start_time": "2021-10-30T12:26:46.388237",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"5.2.2\"></a>\n",
    "### 5.2.2 k-nearest neighbors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "25b74ca5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:46.665359Z",
     "iopub.status.busy": "2021-10-30T12:26:46.664743Z",
     "iopub.status.idle": "2021-10-30T12:26:46.684971Z",
     "shell.execute_reply": "2021-10-30T12:26:46.685713Z",
     "shell.execute_reply.started": "2021-10-30T12:24:00.099792Z"
    },
    "papermill": {
     "duration": 0.118286,
     "end_time": "2021-10-30T12:26:46.685942",
     "exception": false,
     "start_time": "2021-10-30T12:26:46.567656",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.85      0.92      0.88       137\n",
      "           1       0.85      0.73      0.79        86\n",
      "\n",
      "    accuracy                           0.85       223\n",
      "   macro avg       0.85      0.83      0.83       223\n",
      "weighted avg       0.85      0.85      0.85       223\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# KNN\n",
    "kNN = KNeighborsClassifier()\n",
    "kNN.fit(x_train, y_train)\n",
    "predictions = kNN.predict(x_test)\n",
    "print(classification_report(y_test, predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "e2d6411e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:46.869500Z",
     "iopub.status.busy": "2021-10-30T12:26:46.868641Z",
     "iopub.status.idle": "2021-10-30T12:26:46.948119Z",
     "shell.execute_reply": "2021-10-30T12:26:46.948594Z",
     "shell.execute_reply.started": "2021-10-30T12:24:00.133963Z"
    },
    "papermill": {
     "duration": 0.172273,
     "end_time": "2021-10-30T12:26:46.948753",
     "exception": false,
     "start_time": "2021-10-30T12:26:46.776480",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8035874439461883"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Cross Validation\n",
    "kNN_cv = StratifiedShuffleSplit(n_splits=5, test_size=.25, random_state=0)\n",
    "kNN_cv_avg = cross_val_score(kNN, X, Y, cv=kNN_cv, scoring=\"accuracy\").mean()\n",
    "kNN_cv_avg"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9cb7370",
   "metadata": {
    "papermill": {
     "duration": 0.090601,
     "end_time": "2021-10-30T12:26:47.129173",
     "exception": false,
     "start_time": "2021-10-30T12:26:47.038572",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"5.2.3\"></a>\n",
    "### 5.2.3 Support Vector Machine"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "238058bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:47.312757Z",
     "iopub.status.busy": "2021-10-30T12:26:47.311894Z",
     "iopub.status.idle": "2021-10-30T12:26:47.391760Z",
     "shell.execute_reply": "2021-10-30T12:26:47.391300Z",
     "shell.execute_reply.started": "2021-10-30T12:24:00.242116Z"
    },
    "papermill": {
     "duration": 0.172591,
     "end_time": "2021-10-30T12:26:47.391915",
     "exception": false,
     "start_time": "2021-10-30T12:26:47.219324",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.83      0.90      0.86       137\n",
      "           1       0.81      0.70      0.75        86\n",
      "\n",
      "    accuracy                           0.82       223\n",
      "   macro avg       0.82      0.80      0.81       223\n",
      "weighted avg       0.82      0.82      0.82       223\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# SVM\n",
    "svm = SVC(probability=True)\n",
    "svm.fit(x_train, y_train)\n",
    "predictions = svm.predict(x_test)\n",
    "print(classification_report(y_test, predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "2bf1797f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:47.578614Z",
     "iopub.status.busy": "2021-10-30T12:26:47.578073Z",
     "iopub.status.idle": "2021-10-30T12:26:47.936022Z",
     "shell.execute_reply": "2021-10-30T12:26:47.935318Z",
     "shell.execute_reply.started": "2021-10-30T12:24:00.325742Z"
    },
    "papermill": {
     "duration": 0.451946,
     "end_time": "2021-10-30T12:26:47.936159",
     "exception": false,
     "start_time": "2021-10-30T12:26:47.484213",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8376681614349776"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Cross Validation\n",
    "svm_cv = StratifiedShuffleSplit(n_splits=5, test_size=.25, random_state=0)\n",
    "svm_cv_avg = cross_val_score(svm, X, Y, cv=svm_cv, scoring=\"accuracy\").mean()\n",
    "svm_cv_avg"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bbab1199",
   "metadata": {
    "papermill": {
     "duration": 0.090859,
     "end_time": "2021-10-30T12:26:48.118398",
     "exception": false,
     "start_time": "2021-10-30T12:26:48.027539",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"5.2.4\"></a>\n",
    "### 5.2.4 Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "d8b5e5db",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:48.311099Z",
     "iopub.status.busy": "2021-10-30T12:26:48.309461Z",
     "iopub.status.idle": "2021-10-30T12:26:48.320099Z",
     "shell.execute_reply": "2021-10-30T12:26:48.320570Z",
     "shell.execute_reply.started": "2021-10-30T12:24:00.705832Z"
    },
    "papermill": {
     "duration": 0.111447,
     "end_time": "2021-10-30T12:26:48.320727",
     "exception": false,
     "start_time": "2021-10-30T12:26:48.209280",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.77      0.90      0.83       137\n",
      "           1       0.78      0.58      0.67        86\n",
      "\n",
      "    accuracy                           0.78       223\n",
      "   macro avg       0.78      0.74      0.75       223\n",
      "weighted avg       0.78      0.78      0.77       223\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Decision tree\n",
    "dt = DecisionTreeClassifier(random_state=0)\n",
    "dt.fit(x_train, y_train)\n",
    "predictions = dt.predict(x_test)\n",
    "print(classification_report(y_test, predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "e2b923fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:48.506806Z",
     "iopub.status.busy": "2021-10-30T12:26:48.506274Z",
     "iopub.status.idle": "2021-10-30T12:26:48.542322Z",
     "shell.execute_reply": "2021-10-30T12:26:48.542834Z",
     "shell.execute_reply.started": "2021-10-30T12:24:00.729393Z"
    },
    "papermill": {
     "duration": 0.129885,
     "end_time": "2021-10-30T12:26:48.543002",
     "exception": false,
     "start_time": "2021-10-30T12:26:48.413117",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8071748878923767"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Cross Validation\n",
    "dt_cv = StratifiedShuffleSplit(n_splits=5, test_size=.25, random_state=0)\n",
    "dt_cv_avg = cross_val_score(dt, X, Y, cv=dt_cv, scoring=\"accuracy\").mean()\n",
    "dt_cv_avg"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62c266f8",
   "metadata": {
    "papermill": {
     "duration": 0.091006,
     "end_time": "2021-10-30T12:26:48.726199",
     "exception": false,
     "start_time": "2021-10-30T12:26:48.635193",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"5.2.5\"></a>\n",
    "### 5.2.5 Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "0770ba0c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:48.911350Z",
     "iopub.status.busy": "2021-10-30T12:26:48.910797Z",
     "iopub.status.idle": "2021-10-30T12:26:49.088400Z",
     "shell.execute_reply": "2021-10-30T12:26:49.088926Z",
     "shell.execute_reply.started": "2021-10-30T12:24:00.781565Z"
    },
    "papermill": {
     "duration": 0.271577,
     "end_time": "2021-10-30T12:26:49.089115",
     "exception": false,
     "start_time": "2021-10-30T12:26:48.817538",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.81      0.90      0.85       137\n",
      "           1       0.80      0.66      0.73        86\n",
      "\n",
      "    accuracy                           0.81       223\n",
      "   macro avg       0.81      0.78      0.79       223\n",
      "weighted avg       0.81      0.81      0.80       223\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Random Forest\n",
    "rf = RandomForestClassifier(random_state=0)\n",
    "rf.fit(x_train, y_train)\n",
    "predictions = rf.predict(x_test)\n",
    "print(classification_report(y_test, predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "cf0dc104",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:49.277214Z",
     "iopub.status.busy": "2021-10-30T12:26:49.276596Z",
     "iopub.status.idle": "2021-10-30T12:26:50.086931Z",
     "shell.execute_reply": "2021-10-30T12:26:50.086350Z",
     "shell.execute_reply.started": "2021-10-30T12:24:01.044052Z"
    },
    "papermill": {
     "duration": 0.905209,
     "end_time": "2021-10-30T12:26:50.087064",
     "exception": false,
     "start_time": "2021-10-30T12:26:49.181855",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8179372197309418"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Cross Validation\n",
    "rf_cv = StratifiedShuffleSplit(n_splits=5, test_size=.25, random_state=0)\n",
    "rf_cv_avg = cross_val_score(rf, X, Y, cv=rf_cv, scoring=\"accuracy\").mean()\n",
    "rf_cv_avg"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d85a79a6",
   "metadata": {
    "papermill": {
     "duration": 0.092138,
     "end_time": "2021-10-30T12:26:50.271721",
     "exception": false,
     "start_time": "2021-10-30T12:26:50.179583",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"5.2.6\"></a>\n",
    "### 5.2.6 Gradient boosting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "a0c0b8c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:50.460112Z",
     "iopub.status.busy": "2021-10-30T12:26:50.459046Z",
     "iopub.status.idle": "2021-10-30T12:26:50.561206Z",
     "shell.execute_reply": "2021-10-30T12:26:50.560692Z",
     "shell.execute_reply.started": "2021-10-30T12:24:02.168460Z"
    },
    "papermill": {
     "duration": 0.197279,
     "end_time": "2021-10-30T12:26:50.561340",
     "exception": false,
     "start_time": "2021-10-30T12:26:50.364061",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.81      0.92      0.86       137\n",
      "           1       0.84      0.65      0.73        86\n",
      "\n",
      "    accuracy                           0.82       223\n",
      "   macro avg       0.82      0.79      0.80       223\n",
      "weighted avg       0.82      0.82      0.81       223\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Gradient boosting\n",
    "gbt = GradientBoostingClassifier(random_state=0)\n",
    "gbt.fit(x_train, y_train)\n",
    "predictions = gbt.predict(x_test)\n",
    "print(classification_report(y_test, predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "f1bc8fcc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:50.750878Z",
     "iopub.status.busy": "2021-10-30T12:26:50.750274Z",
     "iopub.status.idle": "2021-10-30T12:26:51.194285Z",
     "shell.execute_reply": "2021-10-30T12:26:51.193709Z",
     "shell.execute_reply.started": "2021-10-30T12:24:02.287592Z"
    },
    "papermill": {
     "duration": 0.540284,
     "end_time": "2021-10-30T12:26:51.194419",
     "exception": false,
     "start_time": "2021-10-30T12:26:50.654135",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8349775784753364"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Cross Validation\n",
    "gbt_cv = StratifiedShuffleSplit(n_splits=5, test_size=.25, random_state=0)\n",
    "gbt_cv_avg = cross_val_score(gbt, X, Y, cv=gbt_cv, scoring=\"accuracy\").mean()\n",
    "gbt_cv_avg"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8703fb8",
   "metadata": {
    "papermill": {
     "duration": 0.093631,
     "end_time": "2021-10-30T12:26:51.382531",
     "exception": false,
     "start_time": "2021-10-30T12:26:51.288900",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"5.2.7\"></a>\n",
    "### 5.2.7 XGBoost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "6bc906fa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:51.580744Z",
     "iopub.status.busy": "2021-10-30T12:26:51.580166Z",
     "iopub.status.idle": "2021-10-30T12:26:51.682371Z",
     "shell.execute_reply": "2021-10-30T12:26:51.682789Z",
     "shell.execute_reply.started": "2021-10-30T12:24:02.812383Z"
    },
    "papermill": {
     "duration": 0.203992,
     "end_time": "2021-10-30T12:26:51.682962",
     "exception": false,
     "start_time": "2021-10-30T12:26:51.478970",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.80      0.94      0.87       137\n",
      "           1       0.87      0.63      0.73        86\n",
      "\n",
      "    accuracy                           0.82       223\n",
      "   macro avg       0.84      0.78      0.80       223\n",
      "weighted avg       0.83      0.82      0.81       223\n",
      "\n"
     ]
    }
   ],
   "source": [
    "xgbc = XGBClassifier(random_state=0, use_label_encoder=False, eval_metric='error')\n",
    "xgbc.fit(x_train, y_train)\n",
    "predictions = xgbc.predict(x_test)\n",
    "print(classification_report(y_test, predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "436f899d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:51.872344Z",
     "iopub.status.busy": "2021-10-30T12:26:51.871793Z",
     "iopub.status.idle": "2021-10-30T12:26:52.284881Z",
     "shell.execute_reply": "2021-10-30T12:26:52.285314Z",
     "shell.execute_reply.started": "2021-10-30T12:24:02.932283Z"
    },
    "papermill": {
     "duration": 0.508709,
     "end_time": "2021-10-30T12:26:52.285470",
     "exception": false,
     "start_time": "2021-10-30T12:26:51.776761",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8278026905829595"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Cross Validation\n",
    "xgbc_cv = StratifiedShuffleSplit(n_splits=5, test_size=.25, random_state=0)\n",
    "xgbc_cv_avg = cross_val_score(xgbc, X, Y, cv=xgbc_cv, scoring=\"accuracy\").mean()\n",
    "xgbc_cv_avg"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44f4a39d",
   "metadata": {
    "papermill": {
     "duration": 0.093107,
     "end_time": "2021-10-30T12:26:52.471108",
     "exception": false,
     "start_time": "2021-10-30T12:26:52.378001",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"5.2.8\"></a>\n",
    "### 5.2.8 CatBoost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "51b6b69e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:52.660095Z",
     "iopub.status.busy": "2021-10-30T12:26:52.659221Z",
     "iopub.status.idle": "2021-10-30T12:26:53.472396Z",
     "shell.execute_reply": "2021-10-30T12:26:53.471934Z",
     "shell.execute_reply.started": "2021-10-30T12:24:03.372369Z"
    },
    "papermill": {
     "duration": 0.90864,
     "end_time": "2021-10-30T12:26:53.472534",
     "exception": false,
     "start_time": "2021-10-30T12:26:52.563894",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.81      0.92      0.86       137\n",
      "           1       0.84      0.66      0.74        86\n",
      "\n",
      "    accuracy                           0.82       223\n",
      "   macro avg       0.83      0.79      0.80       223\n",
      "weighted avg       0.82      0.82      0.82       223\n",
      "\n"
     ]
    }
   ],
   "source": [
    "catbc = CatBoostClassifier(random_state=0, eval_metric='Accuracy', verbose=False)\n",
    "catbc.fit(x_train, y_train)\n",
    "predictions = catbc.predict(x_test)\n",
    "print(classification_report(y_test, predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "86064eee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:53.664379Z",
     "iopub.status.busy": "2021-10-30T12:26:53.663758Z",
     "iopub.status.idle": "2021-10-30T12:26:57.433739Z",
     "shell.execute_reply": "2021-10-30T12:26:57.433300Z",
     "shell.execute_reply.started": "2021-10-30T12:24:04.349624Z"
    },
    "papermill": {
     "duration": 3.868395,
     "end_time": "2021-10-30T12:26:57.433894",
     "exception": false,
     "start_time": "2021-10-30T12:26:53.565499",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8331838565022421"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Cross Validation\n",
    "catbc_cv = StratifiedShuffleSplit(n_splits=5, test_size=.25, random_state=0)\n",
    "catbc_cv_avg = cross_val_score(catbc, X, Y, cv=catbc_cv, scoring=\"accuracy\").mean()\n",
    "catbc_cv_avg"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59c5854d",
   "metadata": {
    "papermill": {
     "duration": 0.093645,
     "end_time": "2021-10-30T12:26:57.620693",
     "exception": false,
     "start_time": "2021-10-30T12:26:57.527048",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"5.2.9\"></a>\n",
    "### 5.2.9 LGBoost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "dd2a0df0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:57.815759Z",
     "iopub.status.busy": "2021-10-30T12:26:57.812338Z",
     "iopub.status.idle": "2021-10-30T12:26:57.912692Z",
     "shell.execute_reply": "2021-10-30T12:26:57.913165Z",
     "shell.execute_reply.started": "2021-10-30T12:24:08.597283Z"
    },
    "papermill": {
     "duration": 0.198713,
     "end_time": "2021-10-30T12:26:57.913348",
     "exception": false,
     "start_time": "2021-10-30T12:26:57.714635",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.80      0.92      0.86       137\n",
      "           1       0.83      0.64      0.72        86\n",
      "\n",
      "    accuracy                           0.81       223\n",
      "   macro avg       0.82      0.78      0.79       223\n",
      "weighted avg       0.81      0.81      0.81       223\n",
      "\n"
     ]
    }
   ],
   "source": [
    "lgbc = LGBMClassifier(random_state=0)\n",
    "lgbc.fit(x_train, y_train, eval_metric='Accuracy', verbose=-1)\n",
    "predictions = lgbc.predict(x_test)\n",
    "print(classification_report(y_test, predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "ed5ff7eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:58.112677Z",
     "iopub.status.busy": "2021-10-30T12:26:58.112104Z",
     "iopub.status.idle": "2021-10-30T12:26:58.393814Z",
     "shell.execute_reply": "2021-10-30T12:26:58.394339Z",
     "shell.execute_reply.started": "2021-10-30T12:24:08.715681Z"
    },
    "papermill": {
     "duration": 0.381318,
     "end_time": "2021-10-30T12:26:58.394520",
     "exception": false,
     "start_time": "2021-10-30T12:26:58.013202",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8251121076233183"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Cross Validation\n",
    "lgbc_cv = StratifiedShuffleSplit(n_splits=5, test_size=.25, random_state=0)\n",
    "lgbc_cv_avg = cross_val_score(lgbc, X, Y, cv=lgbc_cv, scoring=\"accuracy\", verbose=False).mean()\n",
    "lgbc_cv_avg"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dfad0561",
   "metadata": {
    "papermill": {
     "duration": 0.093358,
     "end_time": "2021-10-30T12:26:58.583044",
     "exception": false,
     "start_time": "2021-10-30T12:26:58.489686",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"5.3\"></a>\n",
    "## 5.3. Model Comparison"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "62693b40",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:58.780740Z",
     "iopub.status.busy": "2021-10-30T12:26:58.780140Z",
     "iopub.status.idle": "2021-10-30T12:26:58.786042Z",
     "shell.execute_reply": "2021-10-30T12:26:58.785529Z",
     "shell.execute_reply.started": "2021-10-30T12:24:09.015843Z"
    },
    "papermill": {
     "duration": 0.109301,
     "end_time": "2021-10-30T12:26:58.786170",
     "exception": false,
     "start_time": "2021-10-30T12:26:58.676869",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Accuracy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>lr</th>\n",
       "      <td>0.839462</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SVM</th>\n",
       "      <td>0.837668</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GBT</th>\n",
       "      <td>0.834978</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CatBoost</th>\n",
       "      <td>0.833184</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>XGBoost</th>\n",
       "      <td>0.827803</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LGBoost</th>\n",
       "      <td>0.825112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RF</th>\n",
       "      <td>0.817937</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DT</th>\n",
       "      <td>0.807175</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>kNN</th>\n",
       "      <td>0.803587</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Accuracy\n",
       "lr        0.839462\n",
       "SVM       0.837668\n",
       "GBT       0.834978\n",
       "CatBoost  0.833184\n",
       "XGBoost   0.827803\n",
       "LGBoost   0.825112\n",
       "RF        0.817937\n",
       "DT        0.807175\n",
       "kNN       0.803587"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Collect all the model performance\n",
    "model_comparison = pd.DataFrame(data = [lr_cv_avg, kNN_cv_avg, svm_cv_avg, dt_cv_avg, rf_cv_avg, gbt_cv_avg, xgbc_cv_avg, catbc_cv_avg, lgbc_cv_avg], \n",
    "                                index = [\"lr\", \"kNN\", \"SVM\", \"DT\", \"RF\", \"GBT\", \"XGBoost\", \"CatBoost\", \"LGBoost\"],\n",
    "                                columns=['Accuracy'])\\\n",
    "                      .sort_values(by = \"Accuracy\", ascending=False)\n",
    "\n",
    "model_comparison"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "651dff88",
   "metadata": {
    "papermill": {
     "duration": 0.09383,
     "end_time": "2021-10-30T12:26:58.974019",
     "exception": false,
     "start_time": "2021-10-30T12:26:58.880189",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "It seems that the top 5 models are: lr, SVM, GBT, CatBoost, XGBoost"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62f544c7",
   "metadata": {
    "papermill": {
     "duration": 0.095473,
     "end_time": "2021-10-30T12:26:59.163306",
     "exception": false,
     "start_time": "2021-10-30T12:26:59.067833",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"6\"></a>\n",
    "# 6. Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "9fabb290",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:59.374376Z",
     "iopub.status.busy": "2021-10-30T12:26:59.372440Z",
     "iopub.status.idle": "2021-10-30T12:26:59.378697Z",
     "shell.execute_reply": "2021-10-30T12:26:59.379136Z",
     "shell.execute_reply.started": "2021-10-30T12:24:09.033010Z"
    },
    "papermill": {
     "duration": 0.120002,
     "end_time": "2021-10-30T12:26:59.379299",
     "exception": false,
     "start_time": "2021-10-30T12:26:59.259297",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 418 entries, 0 to 417\n",
      "Data columns (total 12 columns):\n",
      " #   Column           Non-Null Count  Dtype   \n",
      "---  ------           --------------  -----   \n",
      " 0   Survived         0 non-null      float64 \n",
      " 1   Pclass           418 non-null    int64   \n",
      " 2   Sex              418 non-null    object  \n",
      " 3   Age              418 non-null    float64 \n",
      " 4   SibSp            418 non-null    int64   \n",
      " 5   Parch            418 non-null    int64   \n",
      " 6   Fare             418 non-null    float64 \n",
      " 7   Embarked         418 non-null    object  \n",
      " 8   title            418 non-null    object  \n",
      " 9   Cabin_indicator  418 non-null    int64   \n",
      " 10  AgeBin           418 non-null    category\n",
      " 11  FareBin          418 non-null    category\n",
      "dtypes: category(2), float64(3), int64(4), object(3)\n",
      "memory usage: 37.1+ KB\n"
     ]
    }
   ],
   "source": [
    "# Get the test dataset\n",
    "testing_df = data_preprocessed_median_df.iloc[891:].copy()\n",
    "testing_df.info() # show entries, dtypes, memory useage."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "7eb1e956",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:59.583089Z",
     "iopub.status.busy": "2021-10-30T12:26:59.582190Z",
     "iopub.status.idle": "2021-10-30T12:26:59.587064Z",
     "shell.execute_reply": "2021-10-30T12:26:59.586543Z",
     "shell.execute_reply.started": "2021-10-30T12:24:09.058631Z"
    },
    "papermill": {
     "duration": 0.113985,
     "end_time": "2021-10-30T12:26:59.587198",
     "exception": false,
     "start_time": "2021-10-30T12:26:59.473213",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>title</th>\n",
       "      <th>Cabin_indicator</th>\n",
       "      <th>AgeBin</th>\n",
       "      <th>FareBin</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>34.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.8292</td>\n",
       "      <td>Q</td>\n",
       "      <td>Mr</td>\n",
       "      <td>0</td>\n",
       "      <td>c</td>\n",
       "      <td>a</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>47.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.0000</td>\n",
       "      <td>S</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>0</td>\n",
       "      <td>c</td>\n",
       "      <td>a</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>male</td>\n",
       "      <td>62.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9.6875</td>\n",
       "      <td>Q</td>\n",
       "      <td>Mr</td>\n",
       "      <td>0</td>\n",
       "      <td>d</td>\n",
       "      <td>a</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.6625</td>\n",
       "      <td>S</td>\n",
       "      <td>Mr</td>\n",
       "      <td>0</td>\n",
       "      <td>b</td>\n",
       "      <td>a</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12.2875</td>\n",
       "      <td>S</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>0</td>\n",
       "      <td>b</td>\n",
       "      <td>a</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived  Pclass     Sex   Age  SibSp  Parch     Fare Embarked title  \\\n",
       "0       NaN       3    male  34.5      0      0   7.8292        Q    Mr   \n",
       "1       NaN       3  female  47.0      1      0   7.0000        S   Mrs   \n",
       "2       NaN       2    male  62.0      0      0   9.6875        Q    Mr   \n",
       "3       NaN       3    male  27.0      0      0   8.6625        S    Mr   \n",
       "4       NaN       3  female  22.0      1      1  12.2875        S   Mrs   \n",
       "\n",
       "   Cabin_indicator AgeBin FareBin  \n",
       "0                0      c       a  \n",
       "1                0      c       a  \n",
       "2                0      d       a  \n",
       "3                0      b       a  \n",
       "4                0      b       a  "
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Have a look\n",
    "testing_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4a3a43f",
   "metadata": {
    "papermill": {
     "duration": 0.094532,
     "end_time": "2021-10-30T12:26:59.776988",
     "exception": false,
     "start_time": "2021-10-30T12:26:59.682456",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"6.1\"></a>\n",
    "## 6.1. Drop irrelevant columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "bebb7d95",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:26:59.979029Z",
     "iopub.status.busy": "2021-10-30T12:26:59.978205Z",
     "iopub.status.idle": "2021-10-30T12:26:59.982081Z",
     "shell.execute_reply": "2021-10-30T12:26:59.982467Z",
     "shell.execute_reply.started": "2021-10-30T12:24:09.080022Z"
    },
    "papermill": {
     "duration": 0.109572,
     "end_time": "2021-10-30T12:26:59.982619",
     "exception": false,
     "start_time": "2021-10-30T12:26:59.873047",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pclass             0\n",
       "Sex                0\n",
       "SibSp              0\n",
       "Parch              0\n",
       "Embarked           0\n",
       "title              0\n",
       "Cabin_indicator    0\n",
       "AgeBin             0\n",
       "FareBin            0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Drop Irrelevant columns\n",
    "test_preprocessed_df = testing_df.drop('Survived', axis=1)\n",
    "\n",
    "# Feature Age and Fare are replaced by AgeBin and FareBin\n",
    "test_preprocessed_df.drop([\"Age\", \"Fare\"],axis=1, inplace=True)\n",
    "\n",
    "# Check Missing value\n",
    "test_preprocessed_df.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "071f1faf",
   "metadata": {
    "papermill": {
     "duration": 0.098242,
     "end_time": "2021-10-30T12:27:00.175974",
     "exception": false,
     "start_time": "2021-10-30T12:27:00.077732",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"6.2\"></a>\n",
    "## 6.2. Feature Engineering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "384f6626",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:27:00.379117Z",
     "iopub.status.busy": "2021-10-30T12:27:00.378530Z",
     "iopub.status.idle": "2021-10-30T12:27:00.381465Z",
     "shell.execute_reply": "2021-10-30T12:27:00.380922Z",
     "shell.execute_reply.started": "2021-10-30T12:24:09.099194Z"
    },
    "papermill": {
     "duration": 0.106413,
     "end_time": "2021-10-30T12:27:00.381590",
     "exception": false,
     "start_time": "2021-10-30T12:27:00.275177",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Combine the SibSp and Parch to Family Size\n",
    "test_preprocessed_df['Family_size'] = test_preprocessed_df['SibSp'] + test_preprocessed_df['Parch'] + 1\n",
    "test_preprocessed_df.drop(['SibSp', 'Parch'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "b9b42fe4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:27:00.582474Z",
     "iopub.status.busy": "2021-10-30T12:27:00.581909Z",
     "iopub.status.idle": "2021-10-30T12:27:00.584766Z",
     "shell.execute_reply": "2021-10-30T12:27:00.584355Z",
     "shell.execute_reply.started": "2021-10-30T12:24:09.113039Z"
    },
    "papermill": {
     "duration": 0.107577,
     "end_time": "2021-10-30T12:27:00.584907",
     "exception": false,
     "start_time": "2021-10-30T12:27:00.477330",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Binning the family_size\n",
    "test_preprocessed_df.loc[test_preprocessed_df['Family_size'] == 1, 'Family_size'] = 0 # Alone\n",
    "test_preprocessed_df.loc[(test_preprocessed_df['Family_size'] > 1) & (test_preprocessed_df['Family_size'] <= 4), 'Family_size'] = 1  # Small Family \n",
    "test_preprocessed_df.loc[(test_preprocessed_df['Family_size'] > 4) & (test_preprocessed_df['Family_size'] <= 6), 'Family_size'] = 2  # Medium Family\n",
    "test_preprocessed_df.loc[test_preprocessed_df['Family_size']  > 6, 'Family_size'] = 3 # Large Family"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "335362f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:27:00.786193Z",
     "iopub.status.busy": "2021-10-30T12:27:00.783555Z",
     "iopub.status.idle": "2021-10-30T12:27:00.801837Z",
     "shell.execute_reply": "2021-10-30T12:27:00.801371Z",
     "shell.execute_reply.started": "2021-10-30T12:24:09.130925Z"
    },
    "papermill": {
     "duration": 0.121483,
     "end_time": "2021-10-30T12:27:00.802003",
     "exception": false,
     "start_time": "2021-10-30T12:27:00.680520",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 418 entries, 0 to 417\n",
      "Data columns (total 14 columns):\n",
      " #   Column           Non-Null Count  Dtype\n",
      "---  ------           --------------  -----\n",
      " 0   Pclass           418 non-null    int64\n",
      " 1   Sex              418 non-null    int64\n",
      " 2   Cabin_indicator  418 non-null    int64\n",
      " 3   AgeBin           418 non-null    int64\n",
      " 4   FareBin          418 non-null    int64\n",
      " 5   Family_size      418 non-null    int64\n",
      " 6   Embarked_C       418 non-null    uint8\n",
      " 7   Embarked_Q       418 non-null    uint8\n",
      " 8   Embarked_S       418 non-null    uint8\n",
      " 9   title_Master     418 non-null    uint8\n",
      " 10  title_Miss       418 non-null    uint8\n",
      " 11  title_Mr         418 non-null    uint8\n",
      " 12  title_Mrs        418 non-null    uint8\n",
      " 13  title_Other      418 non-null    uint8\n",
      "dtypes: int64(6), uint8(8)\n",
      "memory usage: 26.1 KB\n"
     ]
    }
   ],
   "source": [
    "# One-Hot Encoding\n",
    "onehot_df = pd.get_dummies(test_preprocessed_df[onehot_features])\n",
    "test_preprocessed_df.drop(onehot_features, axis=1, inplace=True)\n",
    "test_preprocessed_df = pd.concat([test_preprocessed_df, onehot_df], axis=1)\n",
    "\n",
    "# Label Encoding\n",
    "test_preprocessed_df[\"Sex\"]  = LabelEncoder().fit_transform(test_preprocessed_df[\"Sex\"])\n",
    "test_preprocessed_df[\"AgeBin\"]  = LabelEncoder().fit_transform(test_preprocessed_df[\"AgeBin\"])\n",
    "test_preprocessed_df[\"FareBin\"]  = LabelEncoder().fit_transform(test_preprocessed_df[\"FareBin\"])\n",
    "\n",
    "# Check the data after Feature Engineering\n",
    "test_preprocessed_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "b9800bc4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:27:00.999897Z",
     "iopub.status.busy": "2021-10-30T12:27:00.999310Z",
     "iopub.status.idle": "2021-10-30T12:27:01.015229Z",
     "shell.execute_reply": "2021-10-30T12:27:01.014663Z",
     "shell.execute_reply.started": "2021-10-30T12:24:09.169567Z"
    },
    "papermill": {
     "duration": 0.117382,
     "end_time": "2021-10-30T12:27:01.015356",
     "exception": false,
     "start_time": "2021-10-30T12:27:00.897974",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Cabin_indicator</th>\n",
       "      <th>AgeBin</th>\n",
       "      <th>FareBin</th>\n",
       "      <th>Family_size</th>\n",
       "      <th>Embarked_C</th>\n",
       "      <th>Embarked_Q</th>\n",
       "      <th>Embarked_S</th>\n",
       "      <th>title_Master</th>\n",
       "      <th>title_Miss</th>\n",
       "      <th>title_Mr</th>\n",
       "      <th>title_Mrs</th>\n",
       "      <th>title_Other</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>413</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>414</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>415</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>416</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>417</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>418 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Pclass  Sex  Cabin_indicator  AgeBin  FareBin  Family_size  Embarked_C  \\\n",
       "0         3    1                0       2        0            0           0   \n",
       "1         3    0                0       2        0            1           0   \n",
       "2         2    1                0       3        0            0           0   \n",
       "3         3    1                0       1        0            0           0   \n",
       "4         3    0                0       1        0            1           0   \n",
       "..      ...  ...              ...     ...      ...          ...         ...   \n",
       "413       3    1                0       1        0            0           0   \n",
       "414       1    0                1       2        0            0           1   \n",
       "415       3    1                0       2        0            0           0   \n",
       "416       3    1                0       1        0            0           0   \n",
       "417       3    1                0       1        0            1           1   \n",
       "\n",
       "     Embarked_Q  Embarked_S  title_Master  title_Miss  title_Mr  title_Mrs  \\\n",
       "0             1           0             0           0         1          0   \n",
       "1             0           1             0           0         0          1   \n",
       "2             1           0             0           0         1          0   \n",
       "3             0           1             0           0         1          0   \n",
       "4             0           1             0           0         0          1   \n",
       "..          ...         ...           ...         ...       ...        ...   \n",
       "413           0           1             0           0         1          0   \n",
       "414           0           0             0           0         0          1   \n",
       "415           0           1             0           0         1          0   \n",
       "416           0           1             0           0         1          0   \n",
       "417           0           0             1           0         0          0   \n",
       "\n",
       "     title_Other  \n",
       "0              0  \n",
       "1              0  \n",
       "2              0  \n",
       "3              0  \n",
       "4              0  \n",
       "..           ...  \n",
       "413            0  \n",
       "414            0  \n",
       "415            0  \n",
       "416            0  \n",
       "417            0  \n",
       "\n",
       "[418 rows x 14 columns]"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_preprocessed_df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd30c141",
   "metadata": {
    "papermill": {
     "duration": 0.096617,
     "end_time": "2021-10-30T12:27:01.209307",
     "exception": false,
     "start_time": "2021-10-30T12:27:01.112690",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"6.3\"></a>\n",
    "## 6.3. Make Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "2c47e6d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:27:01.409737Z",
     "iopub.status.busy": "2021-10-30T12:27:01.409183Z",
     "iopub.status.idle": "2021-10-30T12:27:05.661280Z",
     "shell.execute_reply": "2021-10-30T12:27:05.660756Z",
     "shell.execute_reply.started": "2021-10-30T12:24:09.194616Z"
    },
    "papermill": {
     "duration": 4.354798,
     "end_time": "2021-10-30T12:27:05.661410",
     "exception": false,
     "start_time": "2021-10-30T12:27:01.306612",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Make Prediction by the top 5 classifiers\n",
    "voting_clas = VotingClassifier(estimators=[('SVM', svm), ('Logistic_Reg', lr), ('CatBoost', catbc), ('GBt',gbt), ('XGBoost',xgbc)], voting='soft', n_jobs=-1)\n",
    "votingC = voting_clas.fit(X, Y)\n",
    "\n",
    "results = votingC.predict(test_preprocessed_df)\n",
    "results_df = pd.DataFrame(results, columns=['Survived'])\n",
    "predictions_df = pd.concat([test_df['PassengerId'], results_df], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77943db7",
   "metadata": {
    "papermill": {
     "duration": 0.096052,
     "end_time": "2021-10-30T12:27:05.854591",
     "exception": false,
     "start_time": "2021-10-30T12:27:05.758539",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"6.4\"></a>\n",
    "## 6.4. Save the Prediction to CSV file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "4be0bc8c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-30T12:27:06.051837Z",
     "iopub.status.busy": "2021-10-30T12:27:06.051105Z",
     "iopub.status.idle": "2021-10-30T12:27:06.058173Z",
     "shell.execute_reply": "2021-10-30T12:27:06.057564Z",
     "shell.execute_reply.started": "2021-10-30T12:24:13.540956Z"
    },
    "papermill": {
     "duration": 0.107809,
     "end_time": "2021-10-30T12:27:06.058309",
     "exception": false,
     "start_time": "2021-10-30T12:27:05.950500",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Save predictions to .csv for project submission\n",
    "predictions_df.to_csv('submission.csv', index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75cd13ac",
   "metadata": {
    "papermill": {
     "duration": 0.096148,
     "end_time": "2021-10-30T12:27:06.250679",
     "exception": false,
     "start_time": "2021-10-30T12:27:06.154531",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Thanks for reading, have a good day ~"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.10"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 53.966466,
   "end_time": "2021-10-30T12:27:07.692585",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2021-10-30T12:26:13.726119",
   "version": "2.3.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
